{
  "bases": {},
  "root": {
    "path": "",
    "guid": "d890afdd-3a8a-13ae-18df-af3cba9fda87"
  },
  "relids": {
    "31f2ac2b-ca37-1cff-6734-9852fba008a7": "1400778473",
    "40946980-66c4-dd3e-20e9-16fcd1567d46": "416651281",
    "4a8c777e-0036-f696-753a-d900ca9060be": "564787551",
    "5b62419d-389a-8039-be10-2e266c9eec96": "1697300825",
    "63645253-2d02-f982-ce3d-90da1269c6f8": "701504349",
    "709d3174-2df3-a62a-3bad-daee03e4ad90": "416651281",
    "7a852f8a-4b01-8d82-6e7e-15121822b068": "564787551",
    "b4c59092-3c77-ace8-cc52-66cd724c00f0": "323573539",
    "c67979e2-61b6-e1bc-81a9-2ab8cebc4888": "1235767287",
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": "1",
    "d890afdd-3a8a-13ae-18df-af3cba9fda87": null,
    "d8a56045-7740-d7fc-d716-aadfa0fed026": "5185791",
    "f6702116-2a81-9aa8-9aed-e6aa1c0e985e": "1235767287"
  },
  "containment": {
    "31f2ac2b-ca37-1cff-6734-9852fba008a7": {},
    "5b62419d-389a-8039-be10-2e266c9eec96": {},
    "63645253-2d02-f982-ce3d-90da1269c6f8": {},
    "b4c59092-3c77-ace8-cc52-66cd724c00f0": {
      "40946980-66c4-dd3e-20e9-16fcd1567d46": {},
      "7a852f8a-4b01-8d82-6e7e-15121822b068": {},
      "c67979e2-61b6-e1bc-81a9-2ab8cebc4888": {}
    },
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {},
    "d8a56045-7740-d7fc-d716-aadfa0fed026": {
      "4a8c777e-0036-f696-753a-d900ca9060be": {},
      "709d3174-2df3-a62a-3bad-daee03e4ad90": {},
      "f6702116-2a81-9aa8-9aed-e6aa1c0e985e": {}
    }
  },
  "nodes": {
    "31f2ac2b-ca37-1cff-6734-9852fba008a7": {
      "attributes": {
        "name": "member2"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
        "ptr": "b4c59092-3c77-ace8-cc52-66cd724c00f0"
      },
      "registry": {
        "position": {
          "x": 79,
          "y": 704
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "40946980-66c4-dd3e-20e9-16fcd1567d46": {
      "attributes": {
        "name": "c2"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "b4c59092-3c77-ace8-cc52-66cd724c00f0",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8"
      },
      "registry": {
        "position": {
          "x": 349,
          "y": 218
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "4a8c777e-0036-f696-753a-d900ca9060be": {
      "attributes": {},
      "base": "7a852f8a-4b01-8d82-6e7e-15121822b068",
      "meta": {},
      "parent": "d8a56045-7740-d7fc-d716-aadfa0fed026",
      "pointers": {},
      "registry": {},
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "5b62419d-389a-8039-be10-2e266c9eec96": {
      "attributes": {
        "name": "member1"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
        "ptr": "b4c59092-3c77-ace8-cc52-66cd724c00f0"
      },
      "registry": {
        "position": {
          "x": 80,
          "y": 631
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "63645253-2d02-f982-ce3d-90da1269c6f8": {
      "attributes": {
        "name": "node",
        "value": 10
      },
      "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
      "meta": {
        "attributes": {
          "value": {
            "type": "integer",
            "default": 10
          }
        },
        "children": {
          "items": [
            "63645253-2d02-f982-ce3d-90da1269c6f8"
          ],
          "minItems": [
            -1
          ],
          "maxItems": [
            -1
          ]
        },
        "pointers": {
          "ptr": {
            "items": [
              "63645253-2d02-f982-ce3d-90da1269c6f8"
            ],
            "min": 1,
            "max": 1,
            "minItems": [
              -1
            ],
            "maxItems": [
              1
            ]
          },
          "set": {
            "items": [
              "63645253-2d02-f982-ce3d-90da1269c6f8"
            ],
            "minItems": [
              -1
            ],
            "maxItems": [
              -1
            ]
          }
        }
      },
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
        "ptr": null
      },
      "registry": {
        "position": {
          "x": 371,
          "y": 213
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {
        "constraint": {
          "script": "function(core, node, callback) {\ncallback(null,{hasViolation:false,message:\"\"});\n}",
          "priority": 1,
          "info": "just a constraint"
        }
      }
    },
    "709d3174-2df3-a62a-3bad-daee03e4ad90": {
      "attributes": {},
      "base": "40946980-66c4-dd3e-20e9-16fcd1567d46",
      "meta": {},
      "parent": "d8a56045-7740-d7fc-d716-aadfa0fed026",
      "pointers": {},
      "registry": {},
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "7a852f8a-4b01-8d82-6e7e-15121822b068": {
      "attributes": {
        "name": "c1"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "b4c59092-3c77-ace8-cc52-66cd724c00f0",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8"
      },
      "registry": {
        "position": {
          "x": 138,
          "y": 218
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "b4c59092-3c77-ace8-cc52-66cd724c00f0": {
      "attributes": {
        "name": "check"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8"
      },
      "registry": {
        "position": {
          "x": 300,
          "y": 466
        }
      },
      "sets": {
        "set": [
          {
            "attributes": {},
            "guid": "31f2ac2b-ca37-1cff-6734-9852fba008a7",
            "registry": {
              "position": {
                "x": 172,
                "y": 207
              }
            }
          },
          {
            "attributes": {},
            "guid": "5b62419d-389a-8039-be10-2e266c9eec96",
            "registry": {
              "position": {
                "x": 152,
                "y": 112
              }
            }
          }
        ]
      },
      "constraints": {}
    },
    "c67979e2-61b6-e1bc-81a9-2ab8cebc4888": {
      "attributes": {
        "name": "c3"
      },
      "base": "63645253-2d02-f982-ce3d-90da1269c6f8",
      "meta": {},
      "parent": "b4c59092-3c77-ace8-cc52-66cd724c00f0",
      "pointers": {
        "base": "63645253-2d02-f982-ce3d-90da1269c6f8"
      },
      "registry": {
        "position": {
          "x": 547,
          "y": 231
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {
      "attributes": {
        "name": "FCO"
      },
      "base": null,
      "meta": {
        "attributes": {
          "name": {
            "type": "string"
          }
        },
        "children": {
          "minItems": [],
          "maxItems": [],
          "items": []
        }
      },
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": null
      },
      "registry": {
        "DisplayFormat": "$name",
        "PortSVGIcon": "",
        "SVGIcon": "",
        "decorator": "",
        "isAbstract": false,
        "isPort": false,
        "position": {
          "x": 100,
          "y": 100
        }
      },
      "sets": {},
      "constraints": {
        "meta": {
          "script": "function(core, node, callback) {\r\n    \"use strict\";\r\n    var error = null,\r\n        returnValue = {hasViolation:false,message:\"\"},\r\n        i,\r\n        neededChekings = 4,\r\n        meta = core.getJsonMeta(node),\r\n        typeIndexOfChild = function(typePathsArray,childNode){\r\n            var index = -1;\r\n\r\n            while(childNode && index === -1){\r\n                index = typePathsArray.indexOf(core.getPath(childNode));\r\n                childNode = core.getBase(childNode);\r\n            }\r\n\r\n            return index;\r\n        },\r\n        checkChildrenRules = function(){\r\n            var childCount = [],\r\n                index;\r\n            core.loadChildren(node,function(err,children){\r\n                if(err){\r\n                    returnValue.message += \"error during loading of node\\'s children\\n\";\r\n                    error = error || err;\r\n                    return checkingDone();\r\n                }\r\n\r\n                //global count check\r\n                //min\r\n                if(meta.children.min && meta.children.min !== -1){\r\n                    if(children.length < meta.children.min){\r\n                        returnValue.hasViolation = true;\r\n                        returnValue.message += \"node hase fewer nodes than needed\\n\";\r\n                    }\r\n                }\r\n                //max\r\n                if(meta.children.max && meta.children.max !== -1){\r\n                    if(children.length > meta.children.max){\r\n                        returnValue.hasViolation = true;\r\n                        returnValue.message += \"node hase more nodes than allowed\\n\";\r\n                    }\r\n                }\r\n\r\n                //typedCounts\r\n                for(i=0;i<meta.children.items.length;i++){\r\n                    childCount.push(0);\r\n                }\r\n                for(i=0;i<children.length;i++){\r\n                    index = typeIndexOfChild(meta.children.items,children[i]);\r\n                    if(index === -1 ){\r\n                        returnValue.hasViolation = true;\r\n                        returnValue.message += \"child \" + core.getGuid(children[i]) +\" is from prohibited type\\n\";\r\n                    }\r\n                    else {\r\n                        childCount[index]++;\r\n                    }\r\n                }\r\n                for(i=0;i<meta.children.items.length;i++){\r\n                    //min\r\n                    if(meta.children.minItems[i] !== -1){\r\n                        if(meta.children.minItems[i] > childCount[i]){\r\n                            returnValue.hasViolation = true;\r\n                            returnValue.message += \"too few type \"+ meta.children.items[i] +\" children\\n\";\r\n                        }\r\n                    }\r\n                    //max\r\n                    if(meta.children.maxItems[i] !== -1){\r\n                        if(meta.children.maxItems[i] < childCount[i]){\r\n                            returnValue.hasViolation = true;\r\n                            returnValue.message += \"too many type \"+ meta.children.items[i] +\" children\\n\";\r\n                        }\r\n                    }\r\n                }\r\n                return checkingDone();\r\n            });\r\n        },\r\n        checkPointerRules = function(){\r\n            //TODO currently there is no quantity check\r\n            var validNames = core.getValidPointerNames(node),\r\n                names = core.getPointerNames(node),\r\n                checkPointer = function(name){\r\n                    core.loadPointer(node,name,function(err,target){\r\n                        if(err || !target){\r\n                            error = error || err;\r\n                            returnValue.message += \"error during pointer \"+ name +\" load\\n\";\r\n                            return checkDone();\r\n                        }\r\n\r\n                        if(!core.isValidTargetOf(target,node,name)){\r\n                            returnValue.hasViolation = true;\r\n                            returnValue.message += \"target of pointer \"+ name +\" is invalid\\n\";\r\n                        }\r\n                        return checkDone();\r\n                    });\r\n                },\r\n                checkDone = function(){\r\n                    if(--needs === 0){\r\n                        checkingDone();\r\n                    }\r\n                },\r\n                needs,i;\r\n            \r\n            needs = names.length;\r\n            if(needs > 0){\r\n                for(i=0;i<names.length;i++){\r\n                    if(validNames.indexOf(names[i]) === -1){\r\n                        returnValue.hasViolation = true;\r\n                        returnValue.message += \" invalid pointer \"+ names[i] +\" has been found\\n\";\r\n                        checkDone();\r\n                    } else {\r\n                        checkPointer(names[i]);\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                checkDone();\r\n            }\r\n\r\n        },\r\n        checkSetRules = function(){\r\n            //TODO this part is missing yet\r\n            checkingDone();\r\n        },\r\n        checkAttributeRules = function(){\r\n            var names = core.getAttributeNames(node),\r\n                validNames = core.getValidAttributeNames(node);\r\n            for(i=0;i<names.length;i++){\r\n                if(validNames.indexOf(names[i]) !== -1){\r\n                    if(!core.isValidAttributeValueOf(node,names[i],core.getAttribute(node,names[i]))){\r\n                        returnValue.hasViolation = true;\r\n                        returnValue.message += \"attribute \"+names[i]+\" has invalid value\\n\";\r\n                    }\r\n                }\r\n                else {\r\n                    returnValue.hasViolation = true;\r\n                    returnValue.message += \"node has an undefined attribute: \"+names[i];\r\n                }\r\n            }\r\n            checkingDone();\r\n        },\r\n        checkingDone = function(){\r\n            if(--neededChekings === 0){\r\n                callback(error,returnValue);\r\n            }\r\n        };\r\n\r\n    checkChildrenRules();\r\n    checkPointerRules();\r\n    checkSetRules();\r\n    checkAttributeRules();\r\n}",
          "priority": 10,
          "info": "this constraint will check all the meta rules defined to an object"
        }
      }
    },
    "d890afdd-3a8a-13ae-18df-af3cba9fda87": {
      "attributes": {
        "name": "ROOT"
      },
      "base": null,
      "meta": {
        "attributes": {
          "name": {
            "type": "string"
          }
        },
        "children": {
          "minItems": [
            -1
          ],
          "maxItems": [
            -1
          ],
          "items": [
            "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
          ]
        }
      },
      "parent": null,
      "pointers": {
        "base": null
      },
      "registry": {
        "MetaSheets": [
          {
            "SetID": "MetaAspectSet_ed2a8263-59c9-ae3d-a4e9-c20d1cf45e3b",
            "order": 0,
            "title": "META"
          }
        ],
        "ProjectRegistry": {
          "FCO_ID": "/1"
        },
        "usedAddOns": "ConstraintAddOn",
        "validPlugins": ""
      },
      "sets": {
        "MetaAspectSet": [
          {
            "attributes": {},
            "guid": "63645253-2d02-f982-ce3d-90da1269c6f8",
            "registry": {
              "position": {
                "x": 371,
                "y": 213
              }
            }
          },
          {
            "attributes": {},
            "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "registry": {
              "position": {
                "x": 100,
                "y": 100
              }
            }
          }
        ],
        "MetaAspectSet_ed2a8263-59c9-ae3d-a4e9-c20d1cf45e3b": [
          {
            "attributes": {},
            "guid": "63645253-2d02-f982-ce3d-90da1269c6f8",
            "registry": {
              "position": {
                "x": 371,
                "y": 213
              }
            }
          },
          {
            "attributes": {},
            "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "registry": {
              "position": {
                "x": 100,
                "y": 100
              }
            }
          }
        ]
      },
      "constraints": {}
    },
    "d8a56045-7740-d7fc-d716-aadfa0fed026": {
      "attributes": {
        "name": "cPrime"
      },
      "base": "b4c59092-3c77-ace8-cc52-66cd724c00f0",
      "meta": {},
      "parent": "d890afdd-3a8a-13ae-18df-af3cba9fda87",
      "pointers": {
        "base": "b4c59092-3c77-ace8-cc52-66cd724c00f0"
      },
      "registry": {
        "position": {
          "x": 581,
          "y": 462
        }
      },
      "sets": {
        "set": []
      },
      "constraints": {}
    },
    "f6702116-2a81-9aa8-9aed-e6aa1c0e985e": {
      "attributes": {},
      "base": "c67979e2-61b6-e1bc-81a9-2ab8cebc4888",
      "meta": {},
      "parent": "d8a56045-7740-d7fc-d716-aadfa0fed026",
      "pointers": {},
      "registry": {},
      "sets": {
        "set": []
      },
      "constraints": {}
    }
  },
  "metaSheets": {}
}