{
  "bases": {},
  "root": {
    "path": "",
    "guid": "e687d284-a04a-7cbc-93ed-ea941752d57a"
  },
  "relids": {
    "6856a087-613e-3740-ca5d-87a41990c562": "2141283821",
    "8f6f4417-55b5-bf91-e4d6-447f6ced13e6": "960660211",
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": "1",
    "e687d284-a04a-7cbc-93ed-ea941752d57a": null,
    "ef6d34f0-e1b2-f134-0fa1-d642815d0afa": "1365653822"
  },
  "containment": {
    "8f6f4417-55b5-bf91-e4d6-447f6ced13e6": {
      "6856a087-613e-3740-ca5d-87a41990c562": {},
      "ef6d34f0-e1b2-f134-0fa1-d642815d0afa": {}
    },
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {}
  },
  "nodes": {
    "6856a087-613e-3740-ca5d-87a41990c562": {
      "attributes": {
        "name": "transition",
        "rule": "_"
      },
      "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
      "meta": {
        "attributes": {
          "rule": {
            "type": "string",
            "default": "_"
          }
        },
        "pointers": {
          "src": {
            "items": [
              "ef6d34f0-e1b2-f134-0fa1-d642815d0afa"
            ],
            "min": 1,
            "max": 1,
            "minItems": [
              -1
            ],
            "maxItems": [
              1
            ]
          },
          "dst": {
            "items": [
              "ef6d34f0-e1b2-f134-0fa1-d642815d0afa"
            ],
            "min": 1,
            "max": 1,
            "minItems": [
              -1
            ],
            "maxItems": [
              1
            ]
          }
        }
      },
      "parent": "8f6f4417-55b5-bf91-e4d6-447f6ced13e6",
      "pointers": {
        "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
        "dst": null,
        "src": null
      },
      "registry": {
        "position": {
          "x": 114,
          "y": 134
        }
      },
      "sets": {},
      "constraints": {}
    },
    "8f6f4417-55b5-bf91-e4d6-447f6ced13e6": {
      "attributes": {
        "name": "language"
      },
      "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
      "meta": {
        "children": {
          "items": [
            "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
          ],
          "minItems": [
            -1
          ],
          "maxItems": [
            -1
          ]
        }
      },
      "parent": "e687d284-a04a-7cbc-93ed-ea941752d57a",
      "pointers": {
        "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
      },
      "registry": {
        "position": {
          "x": 273,
          "y": 123
        }
      },
      "sets": {},
      "constraints": {}
    },
    "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045": {
      "attributes": {
        "name": "FCO"
      },
      "base": null,
      "meta": {
        "attributes": {
          "name": {
            "type": "string"
          }
        },
        "children": {
          "minItems": [],
          "maxItems": [],
          "items": []
        }
      },
      "parent": "e687d284-a04a-7cbc-93ed-ea941752d57a",
      "pointers": {
        "base": null
      },
      "registry": {
        "DisplayFormat": "$name",
        "PortSVGIcon": "",
        "SVGIcon": "",
        "decorator": "",
        "isAbstract": false,
        "isPort": false,
        "position": {
          "x": 100,
          "y": 100
        }
      },
      "sets": {},
      "constraints": {
        "meta": {
          "script": "function(core, node, callback) {\n    \"use strict\";\n    var error = null,\n        returnValue = {hasViolation:false,message:\"\"},\n        i,\n        neededChekings = 4,\n        meta = core.getJsonMeta(node),\n        typeIndexOfChild = function(typePathsArray,childNode){\n            var index = -1;\n\n            while(childNode && index === -1){\n                index = typePathsArray.indexOf(core.getPath(childNode));\n                childNode = core.getBase(childNode);\n            }\n\n            return index;\n        },\n        checkChildrenRules = function(){\n            var childCount = [],\n                index;\n            core.loadChildren(node,function(err,children){\n                if(err){\n                    returnValue.message += \"error during loading of node\\'s children\\n\";\n                    error = error || err;\n                    return checkingDone();\n                }\n\n                //global count check\n                //min\n                if(meta.children.min && meta.children.min !== -1){\n                    if(children.length < meta.children.min){\n                        returnValue.hasVialoation = true;\n                        returnValue.message += \"node hase fewer nodes than needed\\n\";\n                    }\n                }\n                //max\n                if(meta.children.max && meta.children.max !== -1){\n                    if(children.length > meta.children.max){\n                        returnValue.hasVialoation = true;\n                        returnValue.message += \"node hase more nodes than allowed\\n\";\n                    }\n                }\n\n                //typedCounts\n                for(i=0;i<meta.children.items.length;i++){\n                    childCount.push(0);\n                }\n                for(i=0;i<children.length;i++){\n                    index = typeIndexOfChild(meta.children.items,children[i]);\n                    if(index === -1 ){\n                        returnValue.hasViolation = true;\n                        returnValue.message += \"child \" + core.getGuid(children[i]) +\" is from prohibited type\\n\";\n                    }\n                    else {\n                        childCount[index]++;\n                    }\n                }\n                for(i=0;i<meta.children.items.length;i++){\n                    //min\n                    if(meta.children.minItems[i] !== -1){\n                        if(meta.children.minItems[i] > childCount[i]){\n                            returnValue.hasViolation = true;\n                            returnValue.message += \"too few type \"+ meta.children.items[i] +\" children\\n\";\n                        }\n                    }\n                    //max\n                    if(meta.children.maxItems[i] !== -1){\n                        if(meta.children.maxItems[i] < childCount[i]){\n                            returnValue.hasViolation = true;\n                            returnValue.message += \"too many type \"+ meta.children.items[i] +\" children\\n\";\n                        }\n                    }\n                }\n                return checkingDone();\n            });\n        },\n        checkPointerRules = function(){\n            //TODO currently there is no quantity check\n            var validNames = core.getValidPointerNames(node),\n                names = core.getPointerNames(node),\n                checkPointer = function(name){\n                    core.loadPointer(node,name,function(err,target){\n                        if(err || !target){\n                            error = error || err;\n                            returnValue.message += \"error during pointer \"+ name +\" load\\n\";\n                            return checkDone();\n                        }\n\n                        if(!core.isValidTargetOf(target,node,name)){\n                            returnValue.hasVialoation = true;\n                            returnValue.message += \"target of pointer \"+ name +\" is invalid\\n\";\n                        }\n                        return checkDone();\n                    });\n                },\n                checkDone = function(){\n                    if(--needs === 0){\n                        checkingDone();\n                    }\n                },\n                needs,i;\n            \n            needs = names.length;\n            if(needs > 0){\n                for(i=0;i<names.length;i++){\n                    if(validNames.indexOf(names[i]) === -1){\n                        returnValue.hasVialoation = true;\n                        returnValue.message += \" invalid pointer \"+ names[i] +\" has been found\\n\";\n                        checkDone();\n                    } else {\n                        checkPointer(names[i]);\n                    }\n\n                }\n            } else {\n                checkDone();\n            }\n\n        },\n        checkSetRules = function(){\n            //TODO this part is missing yet\n            checkingDone();\n        },\n        checkAttributeRules = function(){\n            var names = core.getAttributeNames(node),\n                validNames = core.getValidAttributeNames(node);\n            for(i=0;i<names.length;i++){\n                if(validNames.indexOf(names[i]) !== -1){\n                    if(!core.isValidAttributeValueOf(node,names[i],core.getAttribute(node,names[i]))){\n                        returnValue.hasViolation = true;\n                        returnValue.message += \"attribute \"+names[i]+\" has invalid value\\n\";\n                    }\n                }\n                else {\n                    returnValue.hasViolation = true;\n                    returnValue.message += \"node has an undefined attribute: \"+names[i];\n                }\n            }\n            checkingDone();\n        },\n        checkingDone = function(){\n            if(--neededChekings === 0){\n                callback(error,returnValue);\n            }\n        };\n\n    checkChildrenRules();\n    checkPointerRules();\n    checkSetRules();\n    checkAttributeRules();\n}",
          "priority": 10,
          "info": "this constraint will check all the meta rules defined to an object"
        }
      }
    },
    "e687d284-a04a-7cbc-93ed-ea941752d57a": {
      "attributes": {
        "name": "ROOT"
      },
      "base": null,
      "meta": {
        "attributes": {
          "name": {
            "type": "string"
          }
        },
        "children": {
          "minItems": [
            -1
          ],
          "maxItems": [
            -1
          ],
          "items": [
            "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
          ]
        }
      },
      "parent": null,
      "pointers": {
        "base": null
      },
      "registry": {
        "MetaSheets": [
          {
            "SetID": "MetaAspectSet_4fcd453d-3d5d-1e8b-30c7-b4ebc7a45395",
            "order": 0,
            "title": "META"
          }
        ],
        "ProjectRegistry": {
          "FCO_ID": "/1"
        },
        "usedAddOns": "ConstraintAddOn",
        "validPlugins": ""
      },
      "sets": {
        "MetaAspectSet": [
          {
            "attributes": {},
            "guid": "6856a087-613e-3740-ca5d-87a41990c562",
            "registry": {
              "position": {
                "x": 563,
                "y": 161
              }
            }
          },
          {
            "attributes": {},
            "guid": "8f6f4417-55b5-bf91-e4d6-447f6ced13e6",
            "registry": {
              "position": {
                "x": 273,
                "y": 123
              }
            }
          },
          {
            "attributes": {},
            "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "registry": {
              "position": {
                "x": 100,
                "y": 100
              }
            }
          },
          {
            "attributes": {},
            "guid": "ef6d34f0-e1b2-f134-0fa1-d642815d0afa",
            "registry": {
              "position": {
                "x": 543,
                "y": 141
              }
            }
          }
        ],
        "MetaAspectSet_4fcd453d-3d5d-1e8b-30c7-b4ebc7a45395": [
          {
            "attributes": {},
            "guid": "6856a087-613e-3740-ca5d-87a41990c562",
            "registry": {
              "position": {
                "x": 652,
                "y": 175
              }
            }
          },
          {
            "attributes": {},
            "guid": "8f6f4417-55b5-bf91-e4d6-447f6ced13e6",
            "registry": {
              "position": {
                "x": 273,
                "y": 123
              }
            }
          },
          {
            "attributes": {},
            "guid": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
            "registry": {
              "position": {
                "x": 100,
                "y": 100
              }
            }
          },
          {
            "attributes": {},
            "guid": "ef6d34f0-e1b2-f134-0fa1-d642815d0afa",
            "registry": {
              "position": {
                "x": 468,
                "y": 179
              }
            }
          }
        ]
      },
      "constraints": {}
    },
    "ef6d34f0-e1b2-f134-0fa1-d642815d0afa": {
      "attributes": {
        "name": "state",
        "priority": 100
      },
      "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045",
      "meta": {
        "attributes": {
          "priority": {
            "type": "integer",
            "default": 100
          }
        },
        "children": {
          "items": [
            "6856a087-613e-3740-ca5d-87a41990c562",
            "ef6d34f0-e1b2-f134-0fa1-d642815d0afa"
          ],
          "minItems": [
            -1,
            -1
          ],
          "maxItems": [
            -1,
            -1
          ]
        },
        "pointers": {
          "friends": {
            "items": [
              "ef6d34f0-e1b2-f134-0fa1-d642815d0afa"
            ],
            "minItems": [
              -1
            ],
            "maxItems": [
              -1
            ]
          }
        }
      },
      "parent": "8f6f4417-55b5-bf91-e4d6-447f6ced13e6",
      "pointers": {
        "base": "cd891e7b-e2ea-e929-f6cd-9faf4f1fc045"
      },
      "registry": {
        "position": {
          "x": 329,
          "y": 140
        }
      },
      "sets": {
        "friends": []
      },
      "constraints": {}
    }
  },
  "metaSheets": {}
}