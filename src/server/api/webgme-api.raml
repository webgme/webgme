#%RAML 0.8
title: WebGME
version: 1.0


securitySchemes:
  - basic:
      description: Basic authentication scheme
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
            type: string
            description: Basic authentication base64 encoded username and password
            example: Basic Z3Vlc3Q6Z3Vlc3Q=
        responses:
          401:
            description: Authentication required
          403:
            description: Forbidden


resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>> in WebGME.
      get:
        description: Get a list of <<resourcePathName>>. <<desc>>
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollection>>
          
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>
      get:
        description: |
          Get the <<resourcePathName|!singularize>>. <<getDesc>>
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleItem>>
          404:
            body:
              application/json:
                example: |
                  {"message": "<<resourcePathName|!singularize>> not found" }
      put:
        description: |
          Add a new <<resourcePathName|!singularize>> to WebGME. <<putDesc>>
        securedBy: [ basic ]
        body:
          application/json:
            schema: See example
            example: |
              <<putBody>>
        responses:
          204:
            body:
              application/json:
                example: |
                  { "message": "The <<resourcePathName|!singularize>> has been properly entered" }
          403:
          404:
      patch:
        description: Update <<resourcePathName|!singularize>> within WebGME. <<patchDesc>>
        securedBy: [ basic ]
        body:
          application/json:
            schema: See example
            example: |
              <<patchBody>>
        responses:
            204:
            403:
            404:
      delete:
        description: Delete <<resourcePathName|!singularize>> from WebGME. <<deleteDesc>>
        securedBy: [ basic ]
        responses:
          204:
          403:
          404:
  - project-tree:
      get:
        description: Retrieves the raw data object at given path within the project tree. Requires <b>read</b> access for project.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-tree-retrieve.json
          403:
          404:

/:
  get:
    description: WebGME API entry point
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "current_user_url": "http://localhost:8888/api/user",
                "organization_url": "http://localhost:8888/api/orgs/{org}",
                "project_url": "http://localhost:8888/api/projects/{owner}/{project}",
                "user_url": "http://localhost:8888/api/users/{user}",
                "documentation_url": "http://localhost:8888/developer/api"
              }

/user:
  get:
    description: Returns with the current user
    securedBy: [ basic ]
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-user-retrieve.json
  delete:
    description: Remove the current user
    securedBy: [ basic ]
    responses:
      204:
  /data:
    type:
      collection-item:
        exampleItem: !include webgme-api-user-data-retrieve.json
        putBody: !include webgme-api-user-data-retrieve.json
        patchBody: !include webgme-api-user-data-patch.json
        getDesc: The user data field is an arbitrary object where developers can put custom data associated with a specific user. N.B. This data will be shared over all projects and apps in a deployment, consider indexing project/app specific data.
        putDesc: Overwrites the data field.
        patchDesc: Updates/overwrites the user's data with the sent values for matching keys.
        deleteDesc: Clears out the user's data field (sets it to empty dictionary). 

/users:
  type:
    collection:
      exampleCollection: !include webgme-api-users.json
      desc: 
  /{username}:
    type:
      collection-item:
        exampleItem: !include webgme-api-user-retrieve.json
        putBody: !include webgme-api-user-new.json
        patchBody: !include webgme-api-user-patch.json
        getDesc: 
        putDesc: Requires <b>user.siteAdmin</b>.
        patchDesc: Requires <b>user.siteAdmin</b> if setting siteAdmin.
        deleteDesc: Requires is current user or <b>user.siteAdmin</b>.
    /data:
      type:
        collection-item:
          exampleItem: !include webgme-api-user-data-retrieve.json
          putBody: !include webgme-api-user-data-retrieve.json
          patchBody: !include webgme-api-user-data-patch.json
          getDesc: The user data field is an arbitrary object where developers can put custom data associated with a specific user. N.B. This data will be shared over all projects and apps in a deployment, consider indexing project/app specific data.
          putDesc: Overwrites the user's data field. Requires is current user or <b>user.siteAdmin</b>.
          patchDesc: Updates/overwrites the user's data with the sent values for matching keys. Requires is current user or <b>user.siteAdmin</b>.
          deleteDesc: Clears out the user's data field (sets it to empty dictionary). Requires is current user or <b>user.siteAdmin</b>.

/orgs:
  get:
    description: Collection of available organizations in WebGME
    securedBy: []
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-orgs.json
  /{orgId}:
    get:
      description: Retrives organization data including members.
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-org-retrieve.json
        404:
    put:
      description: Create a new organization. Requires <b>user.canCreate</b> or <b>user.siteAdmin</b>.
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-org-new.json
        403:
        404:
    delete:
      description: Delete an organization. Requires admin in organization or <b>user.siteAdmin</b>.
      securedBy: [ basic ]
      responses:
        204:
        403:
        404:
    
    /users/{username}:
      put:
        description: Adds user to the organization. Requires admin in organization or <b>user.siteAdmin</b>.
        securedBy: [ basic ]
        responses:
          200:
          403:
          404:
        
      delete:
        description: Delete user from the organization. Requires admin in organization or <b>user.siteAdmin</b>.
        securedBy: [ basic ]
        responses:
          204:
          403:
          404:
          
    /admins/{username}:
      put:
        description: Make user admin for the organization. Requires admin in organization or <b>user.siteAdmin</b>.
        securedBy: [ basic ]
        responses:
          200:
          403:
          404:
        
      delete:
        description: Remove user from admins of the organization. Requires admin in organization or <b>user.siteAdmin</b>.
        securedBy: [ basic ]
        responses:
          204:
          403:
          404:


/projects:
  type:
    collection:
      exampleCollection: !include webgme-api-projects.json
      desc: Only lists the projects where the user has at least <b>read</b> access.
  /{ownerId}/{projectName}:
    uriParameters:
      ownerId:
        example: guest
      projectName:
        example: ActivePanels
    type:
      collection-item:
        exampleItem: !include webgme-api-project-retrieve.json
        putBody: !include webgme-api-project-new.json
        patchBody: !include webgme-api-project-patch.json
        getDesc: Requires <b>read</b> access for project.
        putDesc: Requires <b>user.canCreate</b>.
        patchDesc: Requires <b>write</b> access for project.
        deleteDesc: Requires <b>delete</b> access for project.
    /authorize/{userOrOrgId}:
      uriParameters:
        userOrOrgId:
          example: demoUser
      delete:
        description: Remove user's or organization's access rights to the project. Requires at least one of the following from user;
           is <b>owner</b> of the project, is <b>admin in the organization</b> that owns the project, or is <b>siteAdmin</b>.
        responses:
          204:
          403:
          404:
      /{rights}:
        uriParameters:
          rights:
            description: Combination of r-read, w-write, d-delete
            example: rwd
        put:
          description: Grants user or organization access to the project. Requires at least one of the following from user;
           is <b>owner</b> of the project, is <b>admin in the organization</b> that owns the project, or is <b>siteAdmin</b>.
          responses:
            204:
            403:
            404:
    /commits:
      get:
        description: Retrives an array of latested commits made to the project. Requires <b>read</b> access for project.
        queryParameters:
          n:
            displayName: n
            type: number
            description: Maximum number of commits to retrieve (default 100).
            example: 2
            required: false
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-commits-retrieve.json
          403:
      /{commitId}:
        uriParameters:
          commitId:
            description: Commit hash, with or without URL-encoded '#'.
            example: b83ee8d50034fc96f006176bba516e68ce50838a
        get:
          description: Retrieves the commit object associated with the commitId. Requires <b>read</b> access for project.
          responses:
            200:
              body:
                application/json:
                  example: !include webgme-api-commit-retrieve.json
            403:
        /tree/{nodePath}:
          uriParameters:
            nodePath:
              example: 1563412505/5585498754
          type:
            project-tree:

    /compare/{branchOrCommitA}...{branchOrCommitB}:
      get:
    /branches:
      type:
        collection:
          exampleCollection: !include webgme-api-branches.json
          desc: Requires <b>read</b> access for project.
        
      /{branchId}:
        uriParameters:
          branchId:
            example: master
        type:
          collection-item:
            exampleItem: !include webgme-api-branch-retrieve.json
            putBody: "{
              \"hash\": \"#f2a624d9cfbf883c927b04dd45800ba55537dff5\"
            }"
            patchBody: "{
              \"oldHash\": \"#f2a624d9cfbf883c927b04dd45800ba55537dff5\",
              \"newHash\": \"#4ac76d63da6f50cc5baaa5bfb42c86138edc9396\"
            }"
            getDesc: Requires <b>read</b> access for project.
            putDesc: Requires <b>write</b> access for project.
            patchDesc: Requires <b>write</b> access for project.
            deleteDesc: Requires <b>write</b> access for project.
        /commits:
          get:
            description: Retrives an array of the commit history for the branch. Requires <b>read</b> access for project.
            queryParameters:
              n:
                displayName: n
                type: number
                description: Maximum number of commits to retrieve (default 100).
                example: 2
                required: false
            responses:
              200:
                body:
                  application/json:
                    example: !include webgme-api-commits-retrieve.json
              403:
          
        /tree/{nodePath}:
          uriParameters:
            nodePath:
              example: 1563412505/5585498754
          type:
            project-tree:
    /tags:
      type:
        collection:
          exampleCollection: !include webgme-api-branches.json
          desc: Requires <b>read</b> access for project.
      /{tagId}:
        uriParameters:
          tagId:
            example: myTag
        type:
          collection-item:
            exampleItem: !include webgme-api-commit-retrieve.json
            putBody: "{
              \"hash\": \"#f2a624d9cfbf883c927b04dd45800ba55537dff5\"
            }"
            patchBody: "{
              \"hash\": \"#f2a624d9cfbf883c927b04dd45800ba55537dff5\"
            }"
            getDesc: Requires <b>read</b> access for project.
            putDesc: Requires <b>write</b> access for project.
            patchDesc: Requires <b>delete</b> access for project.
            deleteDesc: Requires <b>delete</b> access for project.
    /hooks:
      description: Returns with the list of webHooks.
      type:
        collection:
          exampleCollection: !include webgme-api-branches.json
          desc: Requires <b>read</b> access for project.
      /{hookId}:
        description: Returns with the webHook information.
        uriParameters:
          hookId:
            example: myHook
        type:
          collection-item:
            exampleItem: !include webgme-api-commit-retrieve.json
            putBody: "{
              \"events\": [\"commit\",\"branchCreated\"],
              \"description\": \"Information about the hook\",
              \"url\": \"http://address/to/the/hook\"
            }"
            patchBody: "{
              \"active\": false
            }"
            getDesc: Requires <b>read</b> access for project.
            putDesc: Requires <b>write</b> access for project.
            patchDesc: Requires <b>write</b> access for project.
            deleteDesc: Requires <b>write</b> access for project.

    /squash:
      put:
        description: Squash multi commits into a single one. Requires <b>write</b> access for project.
        securedBy: [ basic ]
        body:
          application/json:
              example: |
                {
                    "fromCommit":"#6e41041cf8e6cf3f81039c101b3adfc46ab703d4",
                    "toCommitOrBranch":"master",
                    "message":"feature 'A' squashed into a single commit"
                }

/decorators:
  get:
    description: Returns with all available decorators
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-decorators.json

/seeds:
  get:
    description: Returns with all available seeds
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-seeds.json

/visualizers:
  get:
    description: Returns with all available visualizers
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-visualizers.json

/plugins:
  get:
    description: Lists all available plugins
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-plugins.json
  
  /{pluginName}:
    /config:
      get:
        description: Gets the default configuration for the plugin.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-config.json
                
    /configStructure:
      get:
        description: Gets the conficuration structure for a plugin.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-configStructure.json                
    /execute:
      post:
        description: Executes a plugin on server side. Returns with a result id.
        body:
          application/json:
            example: !include webgme-api-plugin-execute-post.json   
        
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-execute.json   
    
    /results/{resultId}:
      get:
        description: Gets a result for this plugin by resultId.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-result.json   

/blob:
  description: TO BE MOVED here from /rest/blob
  /metadata:    
    get:
      description: lists all metadata
      
    /{metadataHash}:
      get:
        description: gets a specific metadata descriptor based on the given hash
      
  /view/{metadataHash}:
    get:
      description: views the content that is associated with the METADATA_HASH in the browser, in case the browser cannot display it then the content gets downloaded.
    
    /path/to/element.json:
      get:
        description: returns with the specified file content from a complex object.

  /download/{metadataHash}:
    get:
      description: downloads the stored file with a name and correct extension, if the content is a complex object then a zip package is returned containing all contents
    
    /path/to/element.json:
      get:
        description: downloads only a specific file from a complex content
  
  
  /createFile/{filename}:
    post:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-blob-createFile-response.json
      
  /createMetadata:
    post:
      
      
/executor:
  description: TO BE MOVED here from /rest/executor
  
  get:
    description: List all jobs
    
  /info/{hash}:
    get:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-executor-info.json
  
  
  /create/{hash}:
    post:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-executor-create-response.json
  
  /update/{hash}:
    post:
    
  /cancel/{hash}:
    post:
  
  /worker:
    get:
    
    post:
    
  
  
  
  
