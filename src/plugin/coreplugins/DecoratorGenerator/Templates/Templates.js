/* Generated file based on ejs templates */
define([], function() {
    return {
    "Core/Template.META.js.ejs": "/*globals define, _*/\r\n/**\r\n * Copyright (C) 2014 Vanderbilt University, All rights reserved.\r\n * \r\n * AUTO GENERATED CODE FOR PROJECT <%=decorator.name%>\r\n */\r\n\r\n\r\ndefine([\r\n    'underscore',\r\n    'js/Utils/METAAspectHelper'\r\n], function (\r\n    _underscore,\r\n    METAAspectHelper) {\r\n\r\n    'use strict';\r\n\r\n    var _metaID = '<%=name%>.META.js';\r\n\r\n    //META ASPECT TYPES\r\n    var _metaTypes = {\r\n<%var metaNodeInfo, i;\r\nfor (i = 0; i < metaNodes.length; i += 1) {\r\n    metaNodeInfo = metaNodes[i];\r\n%>        <%=metaNodeInfo.name%>: '<%=metaNodeInfo.path%>',\r\n<%}%>\r\n    };\r\n\r\n    //META ASPECT TYPE CHECKING\r\n<%for (i = 0; i < metaNodes.length; i += 1) {\r\n        metaNodeInfo = metaNodes[i];\r\n%>    var _is<%=metaNodeInfo.name%> = function (objID) {\r\n        return METAAspectHelper.isMETAType(objID, _metaTypes.<%=metaNodeInfo.name%>);\r\n    };\r\n<%}%>\r\n\r\n    var _queryMetaTypes = function () {\r\n        var nMetaTypes = METAAspectHelper.getMETAAspectTypes(),\r\n            m;\r\n\r\n        if (!_.isEqual(_metaTypes, nMetaTypes)) {\r\n            var metaOutOfDateMsg = _metaID + ' is not up to date with the latest META aspect. Please update your local copy!';\r\n            if (console.error) {\r\n                console.error(metaOutOfDateMsg);\r\n            } else {\r\n                console.log(metaOutOfDateMsg);\r\n            }\r\n\r\n            for (m in _metaTypes) {\r\n                if (_metaTypes.hasOwnProperty(m)) {\r\n                    delete _metaTypes[m];\r\n                }\r\n            }\r\n\r\n            for (m in nMetaTypes) {\r\n                if (nMetaTypes.hasOwnProperty(m)) {\r\n                    _metaTypes[m] = nMetaTypes[m];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //hook up to META ASPECT CHANGES\r\n    METAAspectHelper.addEventListener(METAAspectHelper.events.META_ASPECT_CHANGED, function () {\r\n        _queryMetaTypes();\r\n    });\r\n\r\n    //generate the META types on the first run\r\n    _queryMetaTypes();\r\n\r\n    //return utility functions\r\n    return {\r\n        META_TYPES: _metaTypes,\r\n        TYPE_INFO: {\r\n<%for (i = 0; i < metaNodes.length; i += 1) {\r\n    metaNodeInfo = metaNodes[i];\r\n%>            is<%=metaNodeInfo.name%>: _is<%=metaNodeInfo.name%>,\r\n<%}%>\r\n        }\r\n    };\r\n});",
    "Core/TemplateBase.js.ejs": "/*globals define, $*/\r\n/**\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n */\r\n\r\n\r\ndefine([\r\n    'js/NodePropertyNames',\r\n    'js/Utils/METAAspectHelper',\r\n    './<%= decorator.name %>Decorator.Constants',<%if (config.meta) {%>\r\n    './<%= decorator.name %>.META',<%}%>\r\n    'js/Widgets/DiagramDesigner/DiagramDesignerWidget.Constants',\r\n    'js/Constants'\r\n], function (\r\n    nodePropertyNames,\r\n    METAAspectHelper,\r\n    <%= decorator.name %>DecoratorConstants,<%if (config.meta) {%>\r\n    <%= decorator.name %>META,<%}%>\r\n    DiagramDesignerWidgetConstants,\r\n    CONSTANTS) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * A module representing <%= decorator.name %>Base decorator functionality for the <%= decorator.name %>ModelingLanguage.\r\n     * @exports <%= decorator.name %>Base\r\n     * @version 1.0\r\n     */\r\n    var <%= decorator.name %>Base;\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>Base.\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>Base = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Renders and updates the ports for this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>Base.prototype._updatePorts = function () {\r\n        var self = this,\r\n            portId,\r\n            len = 4,\r\n            gmeID = self._metaInfo[CONSTANTS.GME_ID],\r\n            //META_TYPES = <%= decorator.name %>META.META_TYPES,\r\n            SVGWidth = parseInt(this.skinParts.$svg.attr('width'), 10),\r\n            SVGHeight = parseInt(this.skinParts.$svg.attr('height'), 10),\r\n            PortWidth = <%= decorator.name %>DecoratorConstants.PORT_WIDTH;\r\n\r\n        // reinitialize the port coordinates with an empty object\r\n        self._connectionAreas = {};\r\n        self.skinParts.$connectorContainer.empty();\r\n\r\n        // positioning the connectors' connection areas\r\n\r\n        // TOP\r\n        self._connectionAreas[0] = {\r\n            x1: SVGWidth / 2,\r\n            y1: 0\r\n        };\r\n        // BOTTOM\r\n        self._connectionAreas[1] = {\r\n            x1: SVGWidth / 2,\r\n            y1: SVGHeight\r\n        };\r\n        // LEFT\r\n        self._connectionAreas[2] = {\r\n            x1: 0,\r\n            y1: SVGHeight / 2\r\n        };\r\n        // RIGHT\r\n        self._connectionAreas[3] = {\r\n            x1: SVGWidth,\r\n            y1: SVGHeight / 2\r\n        };\r\n\r\n        while (len--) {\r\n            // render connector\r\n            var connectorE = $('<div/>', {class: DiagramDesignerWidgetConstants.CONNECTOR_CLASS});\r\n            portId = 3 - len;\r\n            if (portId === 3) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.RIGHT_PORT_CLASS);\r\n            } else if (portId === 2) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.LEFT_PORT_CLASS);\r\n            } else if (portId === 1 || portId === 4 || portId === 5) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.BOTTOM_PORT_CLASS);\r\n            } else {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.TOP_PORT_CLASS);\r\n            }\r\n\r\n            connectorE.css({\r\n                top: self._connectionAreas[portId].y1 - PortWidth,\r\n                left: self._connectionAreas[portId].x1 - PortWidth\r\n            });\r\n\r\n            if (self._displayConnectors) {\r\n                // register connectors for creating connections\r\n                if (self.hostDesignerItem) {\r\n                    self.hostDesignerItem.registerConnectors(connectorE);\r\n                } else {\r\n                    self.logger.error('Decorator\\'s hostDesignerItem is not set');\r\n                }\r\n\r\n                self.skinParts.$connectorContainer.append(connectorE);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renders the object based on the meta type.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>Base.prototype._renderMetaTypeSpecificParts = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Gets the connection areas for all connectors associated with this object including ports if there is any.\r\n     * @param id {string} GME id of the port, null if connections has to be specified for this object.\r\n     * @param isEnd {boolean} True if id object is the end point of the connection.\r\n     * @param connectionMetaInfo {object} Source object's meta information.\r\n     * @returns {Array} Connection areas to/from connections can be drawn.\r\n     */\r\n    <%= decorator.name %>Base.prototype.getConnectionAreas = function (id/*, isEnd, connectionMetaInfo*/) {\r\n        var self = this,\r\n            result = [],\r\n            i,\r\n            LEN = 10, // length of stem that can stick out of the connector before connections can turn \r\n            ANGLES = [270, 90, 180, 0], // L, R, T, B\r\n            gmeID = this._metaInfo[CONSTANTS.GME_ID];\r\n            //META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        //by default return the bounding box edges midpoints\r\n        if (id === undefined || id === this.hostDesignerItem.id) {\r\n            for (i = 0; i < ANGLES.length; i += 1) {\r\n                result.push({id: i,\r\n                    x1: self._connectionAreas[i].x1, // xs and ys determine the lines where connections can be drawn on\r\n                    y1: self._connectionAreas[i].y1,\r\n                    x2: self._connectionAreas[i].x1,\r\n                    y2: self._connectionAreas[i].y1,\r\n                    angle1: ANGLES[i], // angles determine from which direction between two angles connections can be drawn\r\n                    angle2: ANGLES[i],\r\n                    len: LEN\r\n                    });\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    return <%= decorator.name %>Base;\r\n});\r\n",
    "Core/TemplateDecorator.Constants.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n */\r\n\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n    return {\r\n        TOP_PORT_CLASS: 'top-port',\r\n        BOTTOM_PORT_CLASS: 'bottom-port',\r\n        LEFT_PORT_CLASS: 'left-port',\r\n        RIGHT_PORT_CLASS: 'right-port',\r\n        CENTER_PORT_CLASS: 'center-port',\r\n        PORT_WIDTH: 6,\r\n        MIN_WIDTH: 80,\r\n        DEFAULT_NAME_WIDTH: 160,\r\n        HEIGHT: 22,\r\n        NAME_DIV_FIXTURE: 6,\r\n        BAR_WIDTH: 'Width'\r\n    };\r\n});",
    "Core/TemplateDecorator.Core.js.ejs": "/*globals define, _, $*/\r\n/**\r\n * A module representing core decorator functionality for the <%= decorator.name %>.\r\n * @exports <%= decorator.name %>DecoratorCore\r\n * @version 1.0\r\n */\r\n\r\n\r\ndefine([\r\n    'js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/RegistryKeys',\r\n    './<%= decorator.name %>Base',<%if (config.meta) {%>\r\n    './<%= decorator.name %>.META',<%}%>\r\n    './<%= decorator.name %>Decorator.Constants',\r\n    'text!./<%= decorator.name %>Decorator.html',\r\n    'text!../default.svg'\r\n], function (\r\n    CONSTANTS,\r\n    METAAspectHelper,\r\n    nodePropertyNames,\r\n    REGISTRY_KEYS,\r\n    <%= decorator.name %>Base,<%if (config.meta) {%>\r\n    <%= decorator.name %>META,<%}%>\r\n    <%= decorator.name %>DecoratorConstants,\r\n    <%= decorator.name %>DecoratorTemplate,\r\n    DefaultSvgTemplate) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n    * Svg element that can be used as a placeholder for the icon if the icon does not exist on the server.\r\n    * @type {*|jQuery|HTMLElement}\r\n    * @private\r\n    */\r\n    var errorSVGBase = $(DefaultSvgTemplate);\r\n\r\n    /**\r\n    * Creates a new instance of <%= decorator.name %>DecoratorCore.\r\n    * @constructor\r\n    */\r\n    function <%= decorator.name %>DecoratorCore() {\r\n    }\r\n\r\n<%if (config.meta) {%>\r\n    var SVG_ICON_PATH = '/decorators/<%= decorator.name %>Decorator/Icons/';\r\n\r\n    /**\r\n     * Contains downloaded svg elements from the server.\r\n     * @type {{}}\r\n     * @private\r\n     */\r\n    var svgCache = {};\r\n\r\n    /**\r\n     * ID list of meta types.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    var _metaAspectTypes = <%= decorator.name %>META.META_TYPES;\r\n\r\n    function downloadMetaSvgSync(metaType) {\r\n        // get the svg's url from the server for this META type\r\n        var svgResourceUrl = SVG_ICON_PATH + metaType + '.svg';\r\n\r\n        // get the svg from the server in SYNC mode, may take some time\r\n        $.ajax(svgResourceUrl, {async: false})\r\n            .done(function (data) {\r\n                // downloaded successfully\r\n                // cache the downloaded content\r\n                svgCache[metaType] = $(data.childNodes[0]);\r\n            })\r\n            .fail(function () {\r\n                console.error('TODO: Add META-type specific SVG at: ' + svgResourceUrl);\r\n            });\r\n    }\r\n\r\n    for (var m in _metaAspectTypes) {\r\n        if (_metaAspectTypes.hasOwnProperty(m)) {\r\n            downloadMetaSvgSync(m);\r\n        }\r\n    }\r\n<%}%>\r\n\r\n    /**\r\n     * Represents the base element that would be inserted into the DOM.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.$DOMBase = (function () {\r\n        var el = $(<%= decorator.name %>DecoratorTemplate);\r\n        //use the same HTML template as the DefaultDecorator.DiagramDesignerWidget\r\n        //but remove the connector DOM elements since they are not needed in the PartBrowser\r\n        //el.find('div.name').remove();\r\n        return el;\r\n    })();\r\n\r\n    /**** Override from *.WidgetDecoratorBase ****/\r\n    <%= decorator.name %>DecoratorCore.prototype.getTerritoryQuery = function () {\r\n        var territoryRule = {};\r\n\r\n        territoryRule[this._metaInfo[CONSTANTS.GME_ID]] = { children: 1 };\r\n\r\n        return territoryRule;\r\n    };\r\n\r\n    /**\r\n     * Initializes decorator.\r\n     * @param params {object}  parameters for initialization\r\n     * @param params.connectors {boolean} True if connectors have to be rendered otherwise false.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._initializeDecorator = function (params) {\r\n        this.$name = undefined;\r\n\r\n        this._displayConnectors = false;\r\n        if (params && params.connectors) {\r\n            this._displayConnectors = params.connectors;\r\n        }\r\n    };\r\n<%if (config.meta) {%>\r\n    /**\r\n     * Downloads and caches the svg files for a given METAType based on a gmeID\r\n     * @param gmeID {string} An ID of the GME object.\r\n     * @returns {*|jQuery|HTMLElement} SVG element that should be displayed.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.getSVGByMetaType = function (gmeID) {\r\n        var metaNames,\r\n            metaName,\r\n            returnSVG,\r\n            len;\r\n\r\n        // get all META types for the given GME object including inheritance in the meta model\r\n        metaNames = METAAspectHelper.getMETATypesOf(gmeID);\r\n\r\n        // reverse the list since the iteration is backwards in the while loop\r\n        metaNames.reverse();\r\n\r\n        // length of the list on which the iteration is performed\r\n        len = metaNames.length;\r\n\r\n        // iterate through the list from the last element to the first one\r\n        while (len--) {\r\n            // get current the META type name\r\n            metaName = metaNames[len];\r\n\r\n            if (!metaName) {\r\n                // if the META type name is invalid return with an error SVG\r\n                returnSVG = errorSVGBase.clone();\r\n            } else {\r\n                // META type name is valid, clone its svg..\r\n                if (svgCache[metaName]) {\r\n                    returnSVG = svgCache[metaName].clone();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (returnSVG === undefined) {\r\n            // if svg is not defined use the default error svg\r\n            returnSVG = errorSVGBase.clone();\r\n        }\r\n\r\n        return returnSVG;\r\n    };\r\n<%}%>\r\n\r\n    /**\r\n     * Gets a clone of an error svg icon.\r\n     * @returns {*|jQuery|HTMLElement} Error svg icon.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.getErrorSVG = function () {\r\n        return errorSVGBase.clone();\r\n    };\r\n\r\n    /**\r\n     * @todo Not implemented yet.\r\n     * @param searchDesc {string} Search description or query.\r\n     * @returns {boolean} True if this object satisfies the search condition.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.doSearch = function (searchDesc) {\r\n        //TODO: correct implementation needed\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Renders the content in the placeholder DOM element.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._renderContent = function () {\r\n        var self = this,\r\n            gmeID = self._metaInfo[CONSTANTS.GME_ID];\r\n        //META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        // meta type of the rendered object\r\n        self._metaType = METAAspectHelper.getMETATypesOf(gmeID)[0];\r\n\r\n        //if (DEBUG) {\r\n        //    //render GME-ID in the DOM, for debugging\r\n        //    self.$el.attr({'data-id': gmeID});\r\n        //}\r\n\r\n        // setting the name of component\r\n        self.skinParts.$name = self.$el.find('.name');\r\n\r\n        //empty out SVG container\r\n        self.$el.find('.svg-container').empty();\r\n\r\n<%if (config.meta) {%>\r\n        //figure out the necessary SVG based on children type\r\n        self.skinParts.$svg = self.getSVGByMetaType(gmeID);\r\n\r\n        if (self.skinParts.$svg) {\r\n            //this.skinParts.$svg.append(this._<%= decorator.name %>DecoratorCore.getPortSVG());\r\n            self.$el.find('.svg-container').append(self.skinParts.$svg);\r\n\r\n            //render the connectors\r\n            self.skinParts.$connectorContainer = self.$el.find('.connector-container');\r\n            self.skinParts.$connectorContainer.empty();\r\n        } else {\r\n            // append error svg if the svg does not exist for this element\r\n            this.$el.find('.svg-container').append(this.getErrorSVG());\r\n        }\r\n<%} else {%>\r\n        self.skinParts.$svg = self.getErrorSVG();\r\n        self.$el.find('.svg-container').append(self.skinParts.$svg);\r\n        self.skinParts.$connectorContainer = self.$el.find('.connector-container');\r\n        self.skinParts.$connectorContainer.empty();\r\n<%}%>\r\n        _.extend(self, new <%= decorator.name %>Base());\r\n\r\n<%if (config.meta) {%>\r\n        // call the type specific renderer\r\n        self._renderMetaTypeSpecificParts();\r\n<%}%>\r\n        // update the rendered object\r\n        self.update();\r\n    };\r\n\r\n\r\n    /**\r\n     * Updates the rendered object. This function is called by the Widget.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.update = function () {\r\n        // internal update function\r\n        this._update();\r\n        if (this._displayConnectors) {\r\n            // initializes the connectors if they have to be displayed.\r\n            this.initializeConnectors();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates the rendered object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._update = function () {\r\n        // update name of the rendered object\r\n        this._updateName();\r\n        this._updatePorts();\r\n    };\r\n\r\n\r\n    <%= decorator.name %>DecoratorCore.prototype._updateColors = function () {\r\n        this._getNodeColorsFromRegistry();\r\n        if (this.fillColor) {\r\n            this.skinParts.$svg.find('path').attr('fill', this.fillColor);\r\n            this.skinParts.$svg.find('ellipse').attr('fill', this.fillColor);\r\n            this.skinParts.$svg.find('rect').attr('fill', this.fillColor);\r\n        } else {\r\n            this.$el.css({'background-color': ''});\r\n        }\r\n\r\n        if (this.borderColor) {\r\n            this.skinParts.$svg.css({\r\n                'border-color': this.borderColor,\r\n                'box-shadow': '0px 0px 7px 0px ' + this.borderColor + ' inset'\r\n            });\r\n            this.skinParts.$name.css({'border-color': this.borderColor});\r\n        } else {\r\n            this.$el.css({\r\n                'border-color': '',\r\n                'box-shadow': ''\r\n            });\r\n            this.skinParts.$name.css({'border-color': ''});\r\n        }\r\n\r\n        if (this.textColor) {\r\n            this.$el.css({color: this.textColor});\r\n        } else {\r\n            this.$el.css({color: ''});\r\n        }\r\n    };\r\n\r\n    <%= decorator.name %>DecoratorCore.prototype._getNodeColorsFromRegistry = function () {\r\n        var objID = this._metaInfo[CONSTANTS.GME_ID];\r\n        this.fillColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.COLOR, true);\r\n        this.borderColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.BORDER_COLOR, true);\r\n        this.textColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.TEXT_COLOR, true);\r\n    };\r\n\r\n    /**\r\n     * Updates the name of the rendered object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._updateName = function () {\r\n        // initialize local variables\r\n        var control = this._control,\r\n            gmeID = this._metaInfo[CONSTANTS.GME_ID],\r\n            name = (control._client.getNode(gmeID)).getAttribute(nodePropertyNames.Attributes.name);\r\n        //META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        if (this.skinParts.$name) {\r\n            // if name exists\r\n            if (name.indexOf('!') === 0) {\r\n                // if name startswith '!' that means the text has to have an overline\r\n                this.skinParts.$name.text(name.slice(1));\r\n                this.skinParts.$name.css('text-decoration', 'overline');\r\n            } else {\r\n                // normal text\r\n                this.skinParts.$name.text(name);\r\n                this.skinParts.$name.css('text-decoration', 'none');\r\n            }\r\n        }\r\n    };\r\n\r\n    /* TO BE OVERRIDDEN IN META TYPE SPECIFIC CODE */\r\n\r\n    /**\r\n     * Renders and updates the ports for this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._updatePorts = function () {\r\n\r\n    };\r\n<%if (config.meta) {%>\r\n    /**\r\n     * Renders the object based on the meta type.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._renderMetaTypeSpecificParts = function () {\r\n\r\n    };\r\n<%}%>\r\n\r\n    /**\r\n     * Registers a GME ID for notifications.\r\n     * @param portId {string} GME ID for getting notification about this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._registerForNotification = function (portId) {\r\n\r\n    };\r\n\r\n    /**\r\n     * Unregisters a GME ID from the event notifications.\r\n     * @param portId {string} GME ID for getting notification about this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._unregisterForNotification = function (portId) {\r\n\r\n    };\r\n\r\n    return <%= decorator.name %>DecoratorCore;\r\n});\r\n",
    "Core/TemplateDecorator.html.ejs": "<div class=\"<%= decorator.name %>-decorator\">\r\n    <div class=\"svg-container\" />\r\n    <div class=\"connector-container\" />\r\n    <div class=\"name\"></div>\r\n</div>",
    "Core/_TemplateDecoratorCore.scss.ejs": "//\r\n// Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n// \r\n// Author: Robert Kereskenyi\r\n//\r\n\r\n//imports\r\n\r\n@import \"../../../scss/Widgets/DiagramDesigner/Connector\";\r\n\r\n$selected-background-color: rgba(219, 234, 252, 0.5);\r\n\r\n@mixin <%= decorator.name %>_decorator_core {\r\n  .<%= decorator.name %>-decorator {\r\n    text-align: center;\r\n\r\n    text.port-name {\r\n      fill: #000;\r\n      font-size: 11px;\r\n\r\n      &.right {\r\n        text-anchor: end;\r\n      }\r\n    }\r\n\r\n    .name {\r\n      display: block;\r\n      text-align: center;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      height: 22px;\r\n      width: auto;\r\n    }\r\n\r\n    .connector {\r\n      @include connector_basics;\r\n\r\n      border-radius: 0px;\r\n\r\n\r\n      //margin-left: $connector-size / -2;\r\n      left: 50%;\r\n\r\n      &.top {\r\n        top: $connector-size / -2;\r\n      }\r\n\r\n      &.bottom {\r\n        bottom: $connector-size / -2;\r\n      }\r\n\r\n    }\r\n\r\n    .connector-container {\r\n      position: absolute;\r\n      top: 0px;\r\n      left: 0px;\r\n      transform-origin: 0 0;\r\n      -webkit-transform-origin: 0 0;\r\n      -moz-transform-origin: 0 0;\r\n    }\r\n\r\n  }\r\n\r\n  .designer-item {\r\n    &.selected {\r\n      .<%= decorator.name %>-decorator {\r\n        background-color: $selected-background-color;\r\n      }\r\n    }\r\n  }\r\n}",
    "default.svg.ejs": "<svg width=\"150\" height=\"45\" xmlns=\"http://www.w3.org/2000/svg\">\r\n <g>\r\n  <rect fill=\"#ececec\" stroke-width=\"2\" x=\"1\" y=\"1\" width=\"148\" height=\"43\" stroke=\"#000\"/>\r\n  <text fill=\"#191919\" stroke-width=\"0\" stroke-opacity=\"null\" x=\"75\" y=\"25\" font-size=\"10\" text-anchor=\"middle\" stroke=\"#000\">&gt;&gt; <%= decorator.name %>Decorator &lt;&lt;</text>\r\n </g>\r\n</svg>",
    "DiagramDesigner/TemplateDecorator.DiagramDesignerWidget.css.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n.<%= decorator.name %>-decorator {\r\n  text-align: center; }\r\n  .<%= decorator.name %>-decorator text.port-name {\r\n    fill: #000;\r\n    font-size: 11px; }\r\n    .<%= decorator.name %>-decorator text.port-name.right {\r\n      text-anchor: end; }\r\n  .<%= decorator.name %>-decorator .name {\r\n    display: block;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 22px;\r\n    width: auto; }\r\n  .<%= decorator.name %>-decorator .connector {\r\n    background-color: #fefefe;\r\n    height: 10px;\r\n    width: 10px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    border: 1px solid blue;\r\n    border-radius: 0px;\r\n    left: 50%; }\r\n    .<%= decorator.name %>-decorator .connector:hover {\r\n      border-color: rgba(82, 168, 236, 0.8);\r\n      -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6); }\r\n    .<%= decorator.name %>-decorator .connector.top {\r\n      top: -6px; }\r\n    .<%= decorator.name %>-decorator .connector.bottom {\r\n      bottom: -6px; }\r\n  .<%= decorator.name %>-decorator .connector-container {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform-origin: 0 0;\r\n    -webkit-transform-origin: 0 0;\r\n    -moz-transform-origin: 0 0; }\r\n\r\n.designer-item.selected .<%= decorator.name %>-decorator {\r\n  background-color: rgba(219, 234, 252, 0.5); }\r\n",
    "DiagramDesigner/TemplateDecorator.DiagramDesignerWidget.js.ejs": "/*globals define, _, $*/\r\n/**\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n */\r\n\r\ndefine([\r\n    'js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/Widgets/DiagramDesigner/DiagramDesignerWidget.DecoratorBase',\r\n    '../Core/<%= decorator.name %>Decorator.Core',\r\n    '../Core/<%= decorator.name %>Decorator.Constants',\r\n    'js/Widgets/DiagramDesigner/DiagramDesignerWidget.Constants',\r\n    'css!./<%= decorator.name %>Decorator.DiagramDesignerWidget'\r\n], function (\r\n    CONSTANTS,\r\n    METAAspectHelper,\r\n    nodePropertyNames,\r\n    DiagramDesignerWidgetDecoratorBase,\r\n    <%= decorator.name %>DecoratorCore,\r\n    <%= decorator.name %>DecoratorConstants,\r\n    DiagramDesignerWidgetConstants) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * A module representing DiagramDesignerWidget specific functionality for the <%= decorator.name %>.\r\n     * @exports <%= decorator.name %>DecoratorDiagramDesignerWidget\r\n     * @version 1.0\r\n     */\r\n    var <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n        DECORATOR_ID = '<%= decorator.name %>DecoratorDiagramDesignerWidget';\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>DecoratorDiagramDesignerWidget\r\n     * @param options {object} options for initialization\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget = function (options) {\r\n        var opts = _.extend( {}, options);\r\n\r\n        DiagramDesignerWidgetDecoratorBase.apply(this, [opts]);\r\n\r\n        // this widget supports connectors and connections\r\n        this._initializeDecorator({connectors: true});\r\n\r\n        this.logger.debug('<%= decorator.name %>DecoratorDiagramDesignerWidget ctor');\r\n    };\r\n\r\n    _.extend(<%= decorator.name %>DecoratorDiagramDesignerWidget.prototype, DiagramDesignerWidgetDecoratorBase.prototype);\r\n    _.extend(<%= decorator.name %>DecoratorDiagramDesignerWidget.prototype, <%= decorator.name %>DecoratorCore.prototype);\r\n\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /*********************** OVERRIDE DECORATORBASE MEMBERS **************************/\r\n\r\n    /**\r\n     * Called when a new element is added to the widget\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.on_addTo = function () {\r\n        var self = this;\r\n\r\n        this._hideName = false;\r\n        this._renderContent();\r\n\r\n        // set name editable on double-click\r\n        if (this.$name) {\r\n            this.$name.on('dblclick.editOnDblClick', null, function (event) {\r\n                if (self.hostDesignerItem.canvas.getIsReadOnlyMode() !== true) {\r\n                    self.hostDesignerItem.canvas.selectNone();\r\n                    $(this).editInPlace({class: '',\r\n                        onChange: function (oldValue, newValue) {\r\n                            self._onNodeTitleChanged(oldValue, newValue);\r\n                        }});\r\n                }\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows all source connectors.\r\n     * @param params {String[]} Registered connector IDs to show.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.showSourceConnectors = function (params) {\r\n        this.logger.debug('showSourceConnectors: ' + JSON.stringify(params));\r\n        this.$sourceConnectors.show();\r\n    };\r\n\r\n    /**\r\n     * Hides the source 'connectors' - detaches them from the DOM\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.hideSourceConnectors = function () {\r\n        this.$sourceConnectors.hide();\r\n    };\r\n\r\n    /**\r\n     * Shows all end (destination) connectors.\r\n     * @param params {String[]} Registered connector IDs to show.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.showEndConnectors = function (params) {\r\n        this.logger.debug('showEndConnectors: ' + JSON.stringify(params));\r\n\r\n        // TODO: elements from same <%= decorator.name %> domain could be connected\r\n        this.$endConnectors.show();\r\n    };\r\n\r\n    /**\r\n     * Hides the end (destination) 'connectors' - detaches them from the DOM\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.hideEndConnectors = function () {\r\n        this.$endConnectors.hide();\r\n    };\r\n\r\n    /**\r\n     * Initializes all connectors then hides them.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.initializeConnectors = function () {\r\n\r\n        //find connectors\r\n        this.$sourceConnectors = this.$el.find('.' + DiagramDesignerWidgetConstants.CONNECTOR_CLASS);\r\n        this.$endConnectors = this.$el.find('.' + DiagramDesignerWidgetConstants.CONNECTOR_CLASS);\r\n\r\n        // hide all connectors by default\r\n        this.hideSourceConnectors();\r\n        this.hideEndConnectors();\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype._registerForNotification = function (portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.registerComponentIDForPartID(portId, partId);\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype._unregisterForNotification = function (portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.unregisterComponentIDFromPartID(portId, partId);\r\n    };\r\n\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.notifyComponentEvent = function (componentList) {\r\n        this.update();\r\n    };\r\n\r\n    return <%= decorator.name %>DecoratorDiagramDesignerWidget;\r\n});\r\n",
    "DiagramDesigner/TemplateDecorator.DiagramDesignerWidget.scss.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n//imports\r\n@import \"../Core/_<%= decorator.name %>DecoratorCore\";\r\n\r\n//include ModelDecoratorCore style\r\n@include <%= decorator.name %>_decorator_core;",
    "Icons/TemplateDiagram.svg.ejs": "<svg width=\"170\" height=\"60\" xmlns=\"http://www.w3.org/2000/svg\">\r\n <g class=\"ports\">\r\n </g>\r\n <g>\r\n  <rect height=\"60\" width=\"130\" y=\"0\" x=\"20\" stroke-width=\"1.5\" stroke=\"#050505\" fill=\"#f8f8f8\"/>\r\n </g>\r\n <g class=\"port-names\">\r\n   <text class=\"port-name\"></text>\r\n </g>\r\n</svg>",
    "Icons/TemplateDiagramFolder.svg.ejs": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\"  >\r\n<g id=\"bunch\" data-iconmelon=\"Minicons Free Vector Icons Pack:79d4c41f66d2ffe417dab3275af0414a\">\r\n              <g>\r\n                <rect x=\"12\" y=\"3\" width=\"20\" height=\"14\"></rect>\r\n                <polygon points=\"10,9 6,9 6,23 26,23 26,19 10,19 \t\"></polygon>\r\n                <polygon points=\"4,15 0,15 0,29 20,29 20,25 4,25 \t\"></polygon>\r\n              </g>\r\n            </g>\r\n</svg>\r\n",
    "Icons/TemplateMetaModel.svg.ejs": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\">\r\n<g id=\"flow-merge\" data-iconmelon=\"Typicons:ea2afc8e1844805d2bdac9325c9ee66f\">\r\n              <g id=\"flow-merge\">\r\n                <g id=\"Layer_1_16_\">\r\n                  <path  d=\"M25.6,22.693v-2.961c0-3.089-2.512-5.6-5.6-5.6c-1.323,0-2.4-1.077-2.4-2.4V9.306\r\n\t\t\tc1.858-0.664,3.2-2.423,3.2-4.506C20.8,2.154,18.646,0,16,0c-2.646,0-4.8,2.154-4.8,4.8c0,2.083,1.342,3.842,3.199,4.504v2.429\r\n\t\t\tc0,1.323-1.076,2.4-2.399,2.4c-3.089,0-5.601,2.511-5.601,5.6v2.961C4.542,23.359,3.2,25.117,3.2,27.2C3.2,29.847,5.354,32,8,32\r\n\t\t\ts4.8-2.153,4.8-4.8c0-2.083-1.342-3.841-3.199-4.507v-2.961c0-1.323,1.076-2.399,2.399-2.399c1.566,0,2.983-0.651,4-1.693\r\n\t\t\tc1.018,1.042,2.435,1.693,4,1.693c1.323,0,2.4,1.076,2.4,2.399v2.961c-1.858,0.666-3.2,2.424-3.2,4.507c0,2.646,2.153,4.8,4.8,4.8\r\n\t\t\ts4.8-2.153,4.8-4.8C28.8,25.117,27.458,23.359,25.6,22.693z M8,28.8c-0.883,0-1.601-0.719-1.601-1.6\r\n\t\t\tC6.399,26.318,7.117,25.6,8,25.6s1.601,0.719,1.601,1.601C9.601,28.081,8.883,28.8,8,28.8z M16,3.2c0.883,0,1.6,0.719,1.6,1.6\r\n\t\t\tc0,0.881-0.717,1.6-1.6,1.6s-1.601-0.719-1.601-1.6C14.399,3.919,15.117,3.2,16,3.2z M24,28.8c-0.883,0-1.6-0.719-1.6-1.6\r\n\t\t\tc0-0.882,0.717-1.601,1.6-1.601s1.6,0.719,1.6,1.601C25.6,28.081,24.883,28.8,24,28.8z\"></path>\r\n                </g>\r\n              </g>\r\n            </g>\r\n</svg>\r\n",
    "PartBrowser/TemplateDecorator.PartBrowserWidget.css.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n.<%= decorator.name %>-decorator {\r\n  text-align: center; }\r\n  .<%= decorator.name %>-decorator text.port-name {\r\n    fill: #000;\r\n    font-size: 11px; }\r\n    .<%= decorator.name %>-decorator text.port-name.right {\r\n      text-anchor: end; }\r\n  .<%= decorator.name %>-decorator .name {\r\n    display: block;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 22px;\r\n    width: auto; }\r\n  .<%= decorator.name %>-decorator .connector {\r\n    background-color: #fefefe;\r\n    height: 10px;\r\n    width: 10px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    border: 1px solid blue;\r\n    border-radius: 0px;\r\n    left: 50%; }\r\n    .<%= decorator.name %>-decorator .connector:hover {\r\n      border-color: rgba(82, 168, 236, 0.8);\r\n      -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6); }\r\n    .<%= decorator.name %>-decorator .connector.top {\r\n      top: -6px; }\r\n    .<%= decorator.name %>-decorator .connector.bottom {\r\n      bottom: -6px; }\r\n  .<%= decorator.name %>-decorator .connector-container {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform-origin: 0 0;\r\n    -webkit-transform-origin: 0 0;\r\n    -moz-transform-origin: 0 0; }\r\n\r\n.designer-item.selected .<%= decorator.name %>-decorator {\r\n  background-color: rgba(219, 234, 252, 0.5); }\r\n",
    "PartBrowser/TemplateDecorator.PartBrowserWidget.js.ejs": "/*globals define, _*/\r\n/**\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n */\r\n\r\ndefine([\r\n    'js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/Widgets/PartBrowser/PartBrowserWidget.DecoratorBase',\r\n    '../Core/<%= decorator.name %>Decorator.Core',\r\n    '../Core/<%= decorator.name %>Decorator.Constants',\r\n    'css!./<%= decorator.name %>Decorator.PartBrowserWidget'\r\n], function (\r\n    CONSTANTS,\r\n    METATypesHelper,\r\n    nodePropertyNames,\r\n    PartBrowserWidgetDecoratorBase,\r\n    <%= decorator.name %>DecoratorCore,\r\n    <%= decorator.name %>DecoratorConstants) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * A module representing PartBrowserWidget specific functionality for the <%= decorator.name %>.\r\n     * @exports <%= decorator.name %>DecoratorPartBrowserWidget\r\n     * @version 1.0\r\n     */\r\n    var <%= decorator.name %>DecoratorPartBrowserWidget,\r\n        DECORATOR_ID = '<%= decorator.name %>DecoratorPartBrowserWidget';\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>DecoratorPartBrowserWidget\r\n     * @param options {object} options for initialization\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget = function (options) {\r\n        var opts = _.extend( {}, options);\r\n\r\n        PartBrowserWidgetDecoratorBase.apply(this, [opts]);\r\n\r\n        // Part browser widget does not support creating connections therefore do not render connectors\r\n        this._initializeDecorator({connectors: false});\r\n\r\n        this.logger.debug('<%= decorator.name %>DecoratorPartBrowserWidget ctor');\r\n    };\r\n\r\n\r\n    /************************ INHERITANCE *********************/\r\n    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, PartBrowserWidgetDecoratorBase.prototype);\r\n    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, <%= decorator.name %>DecoratorCore.prototype);\r\n\r\n\r\n    /**************** OVERRIDE INHERITED / EXTEND ****************/\r\n\r\n    /**** Override from PartBrowserWidgetDecoratorBase ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /**\r\n     * Called before appending the element to the part browser. Renders content for the part browser.\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.beforeAppend = function () {\r\n        this.$el = this.$DOMBase.clone();\r\n\r\n        this._hideName = true;\r\n\r\n        this._renderContent();\r\n    };\r\n\r\n\r\n    /**\r\n     * Called after element is appended to the part browser. Currently this method does nothing.\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.afterAppend = function () {\r\n\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._registerForNotification = function (portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.registerComponentIDForPartID(portId, partId);\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._unregisterForNotification = function (portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.unregisterComponentIDFromPartID(portId, partId);\r\n    };\r\n\r\n    return <%= decorator.name %>DecoratorPartBrowserWidget;\r\n});",
    "PartBrowser/TemplateDecorator.PartBrowserWidget.scss.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n//imports\r\n@import \"../Core/_<%= decorator.name %>DecoratorCore\";\r\n\r\n//include ModelDecoratorCore style\r\n@include <%= decorator.name %>_decorator_core;\r\n",
    "TemplateDecorator.js.ejs": "/*globals define, _*/\r\n/**\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n */\r\n\r\n\r\ndefine([\r\n    'js/Decorators/DecoratorBase',\r\n    './DiagramDesigner/<%= decorator.name %>Decorator.DiagramDesignerWidget',\r\n    './PartBrowser/<%= decorator.name %>Decorator.PartBrowserWidget'\r\n], function (\r\n    DecoratorBase,\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n    <%= decorator.name %>DecoratorPartBrowserWidget) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n    * A module representing a decorator for the <%= decorator.name %> Modeling Language.\r\n    * @exports <%= decorator.name %>Decorator\r\n    * @version 1.0\r\n    */\r\n    var <%= decorator.name %>Decorator,\r\n        __parent__ = DecoratorBase,\r\n        __parent_proto__ = DecoratorBase.prototype,\r\n        DECORATOR_ID = '<%= decorator.name %>Decorator';\r\n\r\n    /**\r\n     * Represents a <%= decorator.name %>Decorator factory.\r\n     * @constructor\r\n     * @param {object} params Parameters for this object.\r\n     */\r\n    <%= decorator.name %>Decorator = function (params) {\r\n        var opts = _.extend( {loggerName: this.DECORATORID}, params);\r\n\r\n        __parent__.apply(this, [opts]);\r\n\r\n        this.logger.debug('<%= decorator.name %>Decorator ctor');\r\n    };\r\n\r\n    _.extend(<%= decorator.name %>Decorator.prototype, __parent_proto__);\r\n    <%= decorator.name %>Decorator.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /*********************** OVERRIDE DecoratorBase MEMBERS **************************/\r\n\r\n    /**\r\n     * Initializes the supported widget map for this decorator.\r\n     *\r\n     * @see <%= decorator.name %>DecoratorDiagramDesignerWidget:<%= decorator.name %>DecoratorDiagramDesignerWidget\r\n     * @see <%= decorator.name %>DecoratorPartBrowserWidget:<%= decorator.name %>DecoratorPartBrowserWidget\r\n     */\r\n    <%= decorator.name %>Decorator.prototype.initializeSupportedWidgetMap = function () {\r\n        this.supportedWidgetMap = {\r\n            DiagramDesigner: <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n            PartBrowser: <%= decorator.name %>DecoratorPartBrowserWidget\r\n        };\r\n    };\r\n\r\n    return <%= decorator.name %>Decorator;\r\n});\r\n"
}});