/*globals define, _*/
/**
 * Copyright (C) 2013 Vanderbilt University, All rights reserved.
 */

define([
    'js/Constants',
    'js/Utils/METAAspectHelper',
    'js/NodePropertyNames',
    'js/Widgets/PartBrowser/PartBrowserWidget.DecoratorBase',
    '../Core/<%= decorator.name %>Decorator.Core.js',
    '../Core/<%= decorator.name %>Decorator.Constants',
    'css!./<%= decorator.name %>Decorator.PartBrowserWidget'
], function (
    CONSTANTS,
    METATypesHelper,
    nodePropertyNames,
    PartBrowserWidgetDecoratorBase,
    <%= decorator.name %>DecoratorCore,
    <%= decorator.name %>DecoratorConstants) {

    'use strict';

    /**
     * A module representing PartBrowserWidget specific functionality for the <%= decorator.name %>.
     * @exports <%= decorator.name %>DecoratorPartBrowserWidget
     * @version 1.0
     */
    var <%= decorator.name %>DecoratorPartBrowserWidget,
        DECORATOR_ID = '<%= decorator.name %>DecoratorPartBrowserWidget';

    /**
     * Initializes a new instance of <%= decorator.name %>DecoratorPartBrowserWidget
     * @param options {object} options for initialization
     * @constructor
     */
    <%= decorator.name %>DecoratorPartBrowserWidget = function (options) {
        var opts = _.extend( {}, options);

        PartBrowserWidgetDecoratorBase.apply(this, [opts]);

        // Part browser widget does not support creating connections therefore do not render connectors
        this._initializeDecorator({connectors: false});

        this.logger.debug('<%= decorator.name %>DecoratorPartBrowserWidget ctor');
    };


    /************************ INHERITANCE *********************/
    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, PartBrowserWidgetDecoratorBase.prototype);
    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, <%= decorator.name %>DecoratorCore.prototype);


    /**************** OVERRIDE INHERITED / EXTEND ****************/

    /**** Override from PartBrowserWidgetDecoratorBase ****/
    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.DECORATORID = DECORATOR_ID;

    /**
     * Called before appending the element to the part browser. Renders content for the part browser.
     */
    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.beforeAppend = function () {
        this.$el = this.$DOMBase.clone();

        this._hideName = true;

        this._renderContent();
    };


    /**
     * Called after element is appended to the part browser. Currently this method does nothing.
     */
    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.afterAppend = function () {

    };


    /**** Override from ModelDecoratorCore ****/
    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._registerForNotification = function (portId) {
        var partId = this._metaInfo[CONSTANTS.GME_ID];

        this._control.registerComponentIDForPartID(portId, partId);
    };


    /**** Override from ModelDecoratorCore ****/
    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._unregisterForNotification = function (portId) {
        var partId = this._metaInfo[CONSTANTS.GME_ID];

        this._control.unregisterComponentIDFromPartID(portId, partId);
    };

    return <%= decorator.name %>DecoratorPartBrowserWidget;
});