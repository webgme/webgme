/*globals define*/
/*jshint node:true, browser:true*/

/**
* Generated by PluginGenerator from webgme on Tue Mar 10 2015 09:29:21 GMT-0500 (Central Daylight Time).
* @author lattmann / https://github.com/lattmann
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of MinimalWorkingExample.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin MinimalWorkingExample.
    * @constructor
    */
    var MinimalWorkingExample = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        // we do not know the meta types, will be populated during run time
        this.metaTypes = {};
    };

    // Prototypal inheritance from PluginBase.
    MinimalWorkingExample.prototype = Object.create(PluginBase.prototype);
    MinimalWorkingExample.prototype.constructor = MinimalWorkingExample;

    /**
    * Gets the name of the MinimalWorkingExample.
    * @returns {string} The name of the plugin.
    * @public
    */
    MinimalWorkingExample.prototype.getName = function () {
        return 'Minimal Working Example';
    };

    /**
     * Gets the configuration structure for the MetaGMEParadigmImporter.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    MinimalWorkingExample.prototype.getConfigStructure = function () {
        return [
            {
                name: 'shouldFail',
                displayName: 'Should fail',
                description: 'Example if the plugin execution fails',
                value: false,
                valueType: 'boolean',
                readOnly: false
            },
            {
                name: 'save',
                displayName: 'Should save the model',
                description: 'Will update the model if true',
                value: true,
                valueType: 'boolean',
                readOnly: false
            }
        ];
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    MinimalWorkingExample.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            currentConfiguration = self.getCurrentConfig();
        self.updateMETA(self.metaTypes);
        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to create an object.
        var newNode = self.core.createNode({parent: self.rootNode, base: self.META.FCO});
        self.core.setAttribute(newNode, 'name', 'My new obj');
        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});

        if (self.isMetaTypeOf(newNode, self.metaTypes.FCO)) {
            self.logger.info('The new node is an FCO');
        }

        var newNodeMetaType = self.getMetaType(newNode);
        self.logger.info('The new node is a(n) ' + self.core.getAttribute(newNodeMetaType, 'name'));

        if (self.baseIsMeta(newNode)) {
            self.logger.info('The new node\'s base type is on the meta sheet.');
        }

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.result.setSuccess(true);
        if (currentConfiguration.save === true) {
            self.save('added obj', function (err, status) {
                if (err) {
                    self.result.setSuccess(false);
                    self.result.setError(err);
                }
                self.logger.info('saved returned with status', status);

                if (currentConfiguration.shouldFail) {
                    self.result.setSuccess(false);
                    self.result.setError('Failed on purpose.');
                    callback('Failed on purpose.', self.result);
                } else {
                    callback(null, self.result);
                }
            });
        } else {
            if (currentConfiguration.shouldFail) {
                self.result.setSuccess(false);
                self.result.setError('Failed on purpose.');
                callback('Failed on purpose.', self.result);
            } else {
                callback(null, self.result);
            }
        }

    };

    return MinimalWorkingExample;
});