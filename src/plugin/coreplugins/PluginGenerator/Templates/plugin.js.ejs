/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator <%= version %> from webgme on <%= date %>.
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase'<%if (meta) {%>,
    'plugin/<%= pluginID %>/<%= pluginID %>/meta'<%}%><%if (templateType) {%>,
    'common/util/ejs',
    'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>
], function (
    PluginConfig,
    PluginBase<%if (meta) {%>,
    MetaTypes<%}%><%if (templateType) {%>,
    ejs,
    TEMPLATES<%}%>) {
    'use strict';

    /**
     * Initializes a new instance of <%= pluginID %>.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin <%= pluginID %>.
     * @constructor
     */
    var <%= pluginID %> = function () {
        // Call base class' constructor.
        PluginBase.call(this);<%if (meta) {%>
        this.metaTypes = MetaTypes;<%}%>
    };

    // Prototypal inheritance from PluginBase.
    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);
    <%= pluginID %>.prototype.constructor = <%= pluginID %>;

    /**
     * Gets the name of the <%= pluginID %>.
     * @returns {string} The name of the plugin.
     * @public
     */
    <%= pluginID %>.prototype.getName = function () {
        return '<%= pluginName %>';
    };

    /**
     * Gets the semantic version (semver.org) of the <%= pluginID %>.
     * @returns {string} The version of the plugin.
     * @public
     */
    <%= pluginID %>.prototype.getVersion = function () {
        return '0.1.0';
    };<% if (description) {%>

    /**
     * Gets the description of the <%= pluginID %>.
     * @returns {string} The description of the plugin.
     * @public
     */
    <%= pluginID %>.prototype.getDescription = function () {
        return '<%= description %>';
    };<%}if (configStructure) {%>

    /**
     * Gets the configuration structure for the <%= pluginID %>.
     * The ConfigurationStructure defines the configuration for the plugin
     * and will be used to populate the GUI when invoking the plugin from webGME.
     * @returns {object} The version of the plugin.
     * @public
     */
    <%= pluginID %>.prototype.getConfigStructure = function () {
        return [
            {
                name: 'species',
                displayName: 'Animal Species',
                regex: '^[a-zA-Z]+$',
                regexMessage: 'Name can only contain English characters!',
                description: 'Which species does the animal belong to.',
                value: 'Horse',
                valueType: 'string',
                readOnly: false
            },
            {
                name: 'age',
                displayName: 'Age',
                description: 'How old is the animal.',
                value: 3,
                valueType: 'number',
                minValue: 0,
                maxValue: 10000,
                readOnly: false
            },
            {
                name: 'carnivor',
                displayName: 'Carnivor',
                description: 'Does the animal eat other animals?',
                value: false,
                valueType: 'boolean',
                readOnly: false
            },
            {
                name: 'classification',
                displayName: 'Classification',
                description: '',
                value: 'Vertebrates',
                valueType: 'string',
                valueItems: [
                    'Vertebrates',
                    'Invertebrates',
                    'Unknown'
                ]
            },
            {
                name: 'color',
                displayName: 'Color',
                description: 'The hex color code for the animal.',
                readOnly: false,
                value: '#FF0000',
                regex: '^#([A-Fa-f0-9]{6})$',
                valueType: 'string'
            },
            {
                name: 'anAsset',
                displayName: 'Document',
                description: '',
                value: '',
                valueType: 'asset',
                readOnly: false
            }
        ];
    };
<%}%>

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    <%= pluginID %>.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;
<%if (meta) {%>
        self.updateMETA(self.metaTypes);<%}%>

        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
<%if (meta) {%>
        nodeObject = self.core.createNode({parent: self.rootNode, base: self.META.FCO});<%} else {%>
        nodeObject = self.activeNode;
<%}%>
        self.core.setAttribute(nodeObject, 'name', 'My new obj');
        self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

<%if (configStructure) {%>
        // Obtain the current user configuration.
        var currentConfig = self.getCurrentConfig();
        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));
<%}
if (templateType) {%>
        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.
        // See instructions in file. You must run this after any modifications to the ejs template.
        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});
        var templateFileName = 'generatedFiles/subDir/<%=templateType%>.<%=templateExt%>';
        var artifact = self.blobClient.createArtifact('templateFiles');
        artifact.addFile(templateFileName, template<%=templateExt.toUpperCase()%>, function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    callback(err, self.result);
                    return;
                }
                // This will add a download hyperlink in the result-dialog.
                self.result.addArtifact(hashes[0]);
                // This will save the changes. If you don't want to save;
                // exclude self.save and call callback directly from this scope.
                self.save('<%= pluginName %> updated model.', function (err) {
                    if (err) {
                        callback(err, self.result);
                        return;
                    }
                    self.result.setSuccess(true);
                    callback(null, self.result);
                });
            });
        });
<%} else {%>
        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('<%= pluginName %> updated model.', function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.result.setSuccess(true);
            callback(null, self.result);
        });
<%}%>
    };

    return <%= pluginID %>;
});