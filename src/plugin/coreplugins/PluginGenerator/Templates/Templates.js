//jshint ignore: start
/* Generated file based on ejs templates */
define([], function() {
    return {
    "combine_templates.js.ejs": "/*jshint node:true*/\r\n/**\r\n * Generated by PluginGenerator <%= version %> from webgme on <%= date %>.\r\n *\r\n * This script will combine all ejs files in the current directory (recursively)\r\n * into one Templates.js file. By requiring this file as TEMPLATE you can retrieve the\r\n * content of each original ejs file through TEMPLATES['plugin.js.ejs'].\r\n *\r\n * Usage: Run this script in the directory with the ejs-templates, e.g. '%YourPlugin%/Templates'.\r\n *\r\n * @author lattmann / https://github.com/lattmann\r\n * @author pmeijer / https://github.com/pmeijer\r\n * @ignore\r\n */\r\n\r\nvar main = function () {\r\n    'use strict';\r\n    var fs = require('fs'),\r\n        isEjsFile = function (str) {\r\n            var ending = '.ejs',\r\n            lastIndex = str.lastIndexOf(ending);\r\n            return (lastIndex !== -1) && (lastIndex + ending.length === str.length);\r\n        },\r\n        walk = function (dir, done) {\r\n            var results = [];\r\n            fs.readdir(dir, function (err, list) {\r\n                if (err) {\r\n                    return done(err);\r\n                }\r\n                var i = 0;\r\n                (function next() {\r\n                    var file = list[i];\r\n                    if (!file) {\r\n                        return done(null, results);\r\n                    }\r\n                    i += 1;\r\n                    file = dir + '/' + file;\r\n                    fs.stat(file, function (err, stat) {\r\n                        if (stat && stat.isDirectory()) {\r\n                            walk(file, function (err, res) {\r\n                                results = results.concat(res);\r\n                                next();\r\n                            });\r\n                        } else {\r\n                            results.push(file);\r\n                            next();\r\n                        }\r\n                    });\r\n                })();\r\n            });\r\n        },\r\n        content = {},\r\n        fileName,\r\n        i,\r\n        templateContent;\r\n\r\n    walk('.', function (err, results) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n        for (i = 0; i < results.length; i += 1) {\r\n            fileName = results[i];\r\n            console.info(fileName);\r\n            if (isEjsFile(fileName)) {\r\n                console.info('Was ejs -> added!');\r\n                content[fileName.substring(2)] = fs.readFileSync(fileName, {'encoding': 'utf-8'});\r\n            }\r\n        }\r\n\r\n        console.info(content);\r\n        templateContent = '';\r\n        templateContent += '/* Generated file based on ejs templates */\\r\\n';\r\n        templateContent += 'define([], function() {\\r\\n';\r\n        templateContent += '    return ' + JSON.stringify(content, null, 4);\r\n        templateContent += '});';\r\n\r\n        fs.writeFileSync('Templates.js', templateContent);\r\n        console.info('Created Templates.js');\r\n    });\r\n};\r\n\r\nif (require.main === module) {\r\n    main();\r\n}",
    "meta.js.ejs": "/**\r\n * Generated by PluginGenerator <%= version %> from webgme on <%= date %>.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n    return {\r\n<%\r\nvar nodeData, i;\r\nfor (i = 0; i < metaNodes.length; i += 1) {\r\n    nodeData = metaNodes[i];%>        '<%= nodeData.name %>': '<%= nodeData.path %>',\r\n<%}%>    };\r\n});",
    "metadata.json.ejs": "{\r\n  \"id\": \"<%= pluginID %>\",\r\n  \"name\": \"<%= pluginName %>\",\r\n  \"version\": \"0.1.0\",\r\n  \"description\": \"<%= description %>\",\r\n  \"icon\": {\r\n    \"class\": \"glyphicon glyphicon-cog\",\r\n    \"src\": \"\"\r\n  },\r\n  \"disableServerSideExecution\": false,\r\n  \"disableBrowserSideExecution\": false,\r\n  \"writeAccessRequired\": false,<%if (configStructure) {%>\r\n  \"configStructure\": [\r\n    {\r\n      \"name\": \"species\",\r\n      \"displayName\": \"Animal Species\",\r\n      \"regex\": \"^[a-zA-Z]+$\",\r\n      \"regexMessage\": \"Name can only contain English characters!\",\r\n      \"description\": \"Which species does the animal belong to.\",\r\n      \"value\": \"Horse\",\r\n      \"valueType\": \"string\",\r\n      \"readOnly\": false\r\n    },\r\n    {\r\n      \"name\": \"age\",\r\n      \"displayName\": \"Age\",\r\n      \"description\": \"How old is the animal.\",\r\n      \"value\": 3,\r\n      \"valueType\": \"number\",\r\n      \"minValue\": 0,\r\n      \"maxValue\": 10000,\r\n      \"readOnly\": false,\r\n      \"writeAccessRequired\": true\r\n    },\r\n    {\r\n      \"name\": \"carnivore\",\r\n      \"displayName\": \"Carnivore\",\r\n      \"description\": \"Does the animal eat other animals?\",\r\n      \"value\": false,\r\n      \"valueType\": \"boolean\",\r\n      \"readOnly\": false\r\n    },\r\n    {\r\n      \"name\": \"classification\",\r\n      \"displayName\": \"Classification\",\r\n      \"description\": \"\",\r\n      \"value\": \"Vertebrates\",\r\n      \"valueType\": \"string\",\r\n      \"valueItems\": [\r\n        \"Vertebrates\",\r\n        \"Invertebrates\",\r\n        \"Unknown\"\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"color\",\r\n      \"displayName\": \"Color\",\r\n      \"description\": \"The hex color code for the animal.\",\r\n      \"readOnly\": false,\r\n      \"value\": \"#FF0000\",\r\n      \"regex\": \"^#([A-Fa-f0-9]{6})$\",\r\n      \"valueType\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"anAsset\",\r\n      \"displayName\": \"Document\",\r\n      \"description\": \"\",\r\n      \"value\": \"\",\r\n      \"valueType\": \"asset\",\r\n      \"readOnly\": false\r\n    }\r\n  ]<%} else {%>\r\n  \"configStructure\": []<%}%>\r\n}",
    "plugin.js.ejs": "/*globals define*/\r\n/*jshint node:true, browser:true*/\r\n\r\n/**\r\n * Generated by PluginGenerator <%= version %> from webgme on <%= date %>.\r\n * A plugin that inherits from the PluginBase. To see source code documentation about available\r\n * properties and methods visit %host%/docs/source/PluginBase.html.\r\n */\r\n\r\ndefine([\r\n    'plugin/PluginConfig',\r\n    'text!./metadata.json',\r\n    'plugin/PluginBase'<%if (meta) {%>,\r\n    'plugin/<%= pluginID %>/<%= pluginID %>/meta'<%}%><%if (templateType) {%>,\r\n    'common/util/ejs',\r\n    'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>\r\n], function (\r\n    PluginConfig,\r\n    pluginMetadata,\r\n    PluginBase<%if (meta) {%>,\r\n    MetaTypes<%}%><%if (templateType) {%>,\r\n    ejs,\r\n    TEMPLATES<%}%>) {\r\n    'use strict';\r\n\r\n    pluginMetadata = JSON.parse(pluginMetadata);\r\n\r\n    /**\r\n     * Initializes a new instance of <%= pluginID %>.\r\n     * @class\r\n     * @augments {PluginBase}\r\n     * @classdesc This class represents the plugin <%= pluginID %>.\r\n     * @constructor\r\n     */\r\n    var <%= pluginID %> = function () {\r\n        // Call base class' constructor.\r\n        PluginBase.call(this);<%if (meta) {%>\r\n        this.metaTypes = MetaTypes;<%}%>\r\n        this.pluginMetadata = pluginMetadata;\r\n    };\r\n\r\n    /**\r\n     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.\r\n     * This is also available at the instance at this.pluginMetadata.\r\n     * @type {object}\r\n     */\r\n    <%= pluginID %>.metadata = pluginMetadata;\r\n\r\n    // Prototypical inheritance from PluginBase.\r\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\r\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\r\n\r\n    /**\r\n     * Main function for the plugin to execute. This will perform the execution.\r\n     * Notes:\r\n     * - Always log with the provided logger.[error,warning,info,debug].\r\n     * - Do NOT put any user interaction logic UI, etc. inside this method.\r\n     * - callback always has to be called even if error happened.\r\n     *\r\n     * @param {function(string, plugin.PluginResult)} callback - the result callback\r\n     */\r\n    <%= pluginID %>.prototype.main = function (callback) {\r\n        // Use self to access core, project, result, logger etc from PluginBase.\r\n        // These are all instantiated at this point.\r\n        var self = this,\r\n            nodeObject;\r\n<%if (meta) {%>\r\n        self.updateMETA(self.metaTypes);<%}%>\r\n\r\n        // Using the logger.\r\n        self.logger.debug('This is a debug message.');\r\n        self.logger.info('This is an info message.');\r\n        self.logger.warn('This is a warning message.');\r\n        self.logger.error('This is an error message.');\r\n\r\n        // Using the coreAPI to make changes.\r\n<%if (meta) {%>\r\n        nodeObject = self.core.createNode({parent: self.rootNode, base: self.META.FCO});<%} else {%>\r\n        nodeObject = self.activeNode;\r\n<%}%>\r\n        self.core.setAttribute(nodeObject, 'name', 'My new obj');\r\n        self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});\r\n\r\n<%if (configStructure) {%>\r\n        // Obtain the current user configuration.\r\n        var currentConfig = self.getCurrentConfig();\r\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\r\n<%}\r\nif (templateType) {%>\r\n        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.\r\n        // See instructions in file. You must run this after any modifications to the ejs template.\r\n        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});\r\n        var templateFileName = 'generatedFiles/subDir/<%=templateType%>.<%=templateExt%>';\r\n        var artifact = self.blobClient.createArtifact('templateFiles');\r\n        artifact.addFile(templateFileName, template<%=templateExt.toUpperCase()%>, function (err) {\r\n            if (err) {\r\n                callback(err, self.result);\r\n                return;\r\n            }\r\n            self.blobClient.saveAllArtifacts(function (err, hashes) {\r\n                if (err) {\r\n                    callback(err, self.result);\r\n                    return;\r\n                }\r\n                // This will add a download hyperlink in the result-dialog.\r\n                self.result.addArtifact(hashes[0]);\r\n                // This will save the changes. If you don't want to save;\r\n                // exclude self.save and call callback directly from this scope.\r\n                self.save('<%= pluginName %> updated model.', function (err) {\r\n                    if (err) {\r\n                        callback(err, self.result);\r\n                        return;\r\n                    }\r\n                    self.result.setSuccess(true);\r\n                    callback(null, self.result);\r\n                });\r\n            });\r\n        });\r\n<%} else {%>\r\n        // This will save the changes. If you don't want to save;\r\n        // exclude self.save and call callback directly from this scope.\r\n        self.save('<%= pluginName %> updated model.')\r\n            .then(function () {\r\n                self.result.setSuccess(true);\r\n                callback(null, self.result);\r\n            })\r\n            .catch(function (err) {\r\n                // Result success is false at invocation.\r\n                callback(null, self.result);\r\n            });\r\n<%}%>\r\n    };\r\n\r\n    return <%= pluginID %>;\r\n});",
    "unit_test.js.ejs": "/*jshint node:true, mocha:true*/\r\n/**\r\n * Generated by PluginGenerator <%= version %> from webgme on <%= date %>.\r\n */\r\n\r\n'use strict';\r\nvar testFixture = require('../../../_globals');\r\n\r\ndescribe('<%= pluginID %>', function () {\r\n    var gmeConfig = testFixture.getGmeConfig(),\r\n        expect = testFixture.expect,\r\n        logger = testFixture.logger.fork('<%= pluginID %>'),\r\n        PluginCliManager = testFixture.WebGME.PluginCliManager,\r\n        projectName = 'testProject',\r\n        pluginName = '<%= pluginID %>',\r\n        project,\r\n        gmeAuth,\r\n        storage,\r\n        commitHash;\r\n\r\n    before(function (done) {\r\n        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)\r\n            .then(function (gmeAuth_) {\r\n                gmeAuth = gmeAuth_;\r\n                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.\r\n                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);\r\n                return storage.openDatabase();\r\n            })\r\n            .then(function () {\r\n                var importParam = {\r\n                    projectSeed: testFixture.path.join(testFixture.SEED_DIR, 'EmptyProject.json'),\r\n                    projectName: projectName,\r\n                    branchName: 'master',\r\n                    logger: logger,\r\n                    gmeConfig: gmeConfig\r\n                };\r\n\r\n                return testFixture.importProject(storage, importParam);\r\n            })\r\n            .then(function (importResult) {\r\n                project = importResult.project;\r\n                commitHash = importResult.commitHash;\r\n                return project.createBranch('test', commitHash);\r\n            })\r\n            .nodeify(done);\r\n    });\r\n\r\n    after(function (done) {\r\n        storage.closeDatabase()\r\n            .then(function () {\r\n                return gmeAuth.unload();\r\n            })\r\n            .nodeify(done);\r\n    });\r\n\r\n    it('should run plugin and update the branch', function (done) {\r\n        var manager = new PluginCliManager(null, logger, gmeConfig),\r\n            pluginConfig = {\r\n            },\r\n            context = {\r\n                project: project,\r\n                commitHash: commitHash,\r\n                branchName: 'test',\r\n                activeNode: '/960660211',\r\n            };\r\n\r\n        manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {\r\n            expect(err).to.equal(null);\r\n            expect(typeof pluginResult).to.equal('object');\r\n            expect(pluginResult.success).to.equal(true);\r\n\r\n            project.getBranchHash('test')\r\n                .then(function (branchHash) {\r\n                    expect(branchHash).to.not.equal(commitHash);\r\n                })\r\n                .nodeify(done);\r\n        });\r\n    });\r\n});\r\n"
}});