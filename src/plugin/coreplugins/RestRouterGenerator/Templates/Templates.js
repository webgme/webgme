//jshint ignore: start
/* Generated file based on ejs templates */
define([], function() {
    return {
    "RestRouter.js.ejs": "/*globals define*/\r\n/*jshint node:true*/\r\n\r\n/**\r\n * Generated by RestRouterGenerator <%= version %> from webgme on <%= date %>.\r\n * To use in webgme add to gmeConfig.rest.components[<routePath>] = filePath.\r\n *\r\n * If you put this file in the root of your directory the following config,\r\n * gmeConfig.rest.component['path/subPath'] = path.join(process.cwd(), './<%= restRouterName %>')\r\n * will expose, e.g. GET <host>/path/subPath/getExample, when running the server.\r\n */\r\n\r\n'use strict';\r\n\r\n// http://expressjs.com/en/guide/routing.html\r\nvar express = require('express'),\r\n    router = express.Router();\r\n\r\n/**\r\n * Called when the server is created but before it starts to listening to incoming requests.\r\n * N.B. gmeAuth, safeStorage and workerManager are not ready to use until the start function is called.\r\n * (However inside an incoming request they are all ensured to have been initialized.)\r\n *\r\n * @param {object} middlewareOpts - Passed by the webgme server.\r\n * @param {GmeConfig} middlewareOpts.gmeConfig - GME config parameters.\r\n * @param {GmeLogger} middlewareOpts.logger - logger\r\n * @param {function} middlewareOpts.ensureAuthenticated - Ensures the user is authenticated.\r\n * @param {function} middlewareOpts.getUserId - If authenticated retrieves the userId from the request.\r\n * @param {object} middlewareOpts.gmeAuth - Authorization module.\r\n * @param {object} middlewareOpts.safeStorage - Accesses the storage and emits events (PROJECT_CREATED, COMMIT..).\r\n * @param {object} middlewareOpts.workerManager - Spawns and keeps track of \"worker\" sub-processes.\r\n */\r\nfunction initialize(middlewareOpts) {\r\n    var logger = middlewareOpts.logger.fork('ExampleRestRouter'),\r\n        ensureAuthenticated = middlewareOpts.ensureAuthenticated,\r\n        getUserId = middlewareOpts.getUserId;\r\n\r\n    logger.debug('initializing ...');\r\n\r\n    // Ensure authenticated can be used only after this rule.\r\n    router.use('*', function (req, res, next) {\r\n        // TODO: set all headers, check rate limit, etc.\r\n\r\n        // This header ensures that any failures with authentication won't redirect.\r\n        res.setHeader('X-WebGME-Media-Type', 'webgme.v1');\r\n        next();\r\n    });\r\n\r\n    // Use ensureAuthenticated if the routes require authentication. (Can be set explicitly for each route.)\r\n    router.use('*', ensureAuthenticated);\r\n\r\n    router.get('/getExample', function (req, res/*, next*/) {\r\n        var userId = getUserId(req);\r\n\r\n        res.json({userId: userId, message: 'get request was handled'});\r\n    });\r\n\r\n    router.patch('/patchExample', function (req, res/*, next*/) {\r\n        res.sendStatus(200);\r\n    });\r\n\r\n\r\n    router.post('/postExample', function (req, res/*, next*/) {\r\n        res.sendStatus(201);\r\n    });\r\n\r\n    router.delete('/deleteExample', function (req, res/*, next*/) {\r\n        res.sendStatus(204);\r\n    });\r\n\r\n    router.get('/error', function (req, res, next) {\r\n        next(new Error('error example'));\r\n    });\r\n\r\n    logger.debug('ready');\r\n}\r\n\r\n/**\r\n * Called before the server starts listening.\r\n * @param {function} callback\r\n */\r\nfunction start(callback) {\r\n    callback();\r\n}\r\n\r\n/**\r\n * Called after the server stopped listening.\r\n * @param {function} callback\r\n */\r\nfunction stop(callback) {\r\n    callback();\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    initialize: initialize,\r\n    router: router,\r\n    start: start,\r\n    stop: stop\r\n};\r\n"
}});